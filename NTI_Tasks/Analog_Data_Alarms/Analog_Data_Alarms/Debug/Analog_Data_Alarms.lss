
Analog_Data_Alarms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000a58  00000aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000c8  008000c8  00000b54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ebb  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8e  00000000  00000000  00002c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f28  00000000  00000000  000037c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000046f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c8  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000101b  00000000  00000000  0000548c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000064a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_1>
   8:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_2>
   c:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ec       	ldi	r26, 0xC8	; 200
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3d       	cpi	r26, 0xDB	; 219
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 07 03 	call	0x60e	; 0x60e <main>
  8a:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SendInstruction>:
#endif
}

/// @brief  Write Character on the LCD.
/// @param characters
void LCD_WriteChar(u8 character) { SendData(character); }
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e1       	ldi	r24, 0x13	; 19
  9a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
  9e:	c4 fb       	bst	r28, 4
  a0:	66 27       	eor	r22, r22
  a2:	60 f9       	bld	r22, 0
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
  aa:	c5 fb       	bst	r28, 5
  ac:	66 27       	eor	r22, r22
  ae:	60 f9       	bld	r22, 0
  b0:	81 e2       	ldi	r24, 0x21	; 33
  b2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
  b6:	c6 fb       	bst	r28, 6
  b8:	66 27       	eor	r22, r22
  ba:	60 f9       	bld	r22, 0
  bc:	82 e2       	ldi	r24, 0x22	; 34
  be:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
  c2:	6c 2f       	mov	r22, r28
  c4:	66 1f       	adc	r22, r22
  c6:	66 27       	eor	r22, r22
  c8:	66 1f       	adc	r22, r22
  ca:	84 e2       	ldi	r24, 0x24	; 36
  cc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e1       	ldi	r24, 0x12	; 18
  d4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
  d8:	89 ef       	ldi	r24, 0xF9	; 249
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <SendInstruction+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <SendInstruction+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e1       	ldi	r24, 0x12	; 18
  e8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <SendInstruction+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <SendInstruction+0x64>
  f6:	00 00       	nop
  f8:	6c 2f       	mov	r22, r28
  fa:	61 70       	andi	r22, 0x01	; 1
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 102:	c1 fb       	bst	r28, 1
 104:	66 27       	eor	r22, r22
 106:	60 f9       	bld	r22, 0
 108:	81 e2       	ldi	r24, 0x21	; 33
 10a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 10e:	c2 fb       	bst	r28, 2
 110:	66 27       	eor	r22, r22
 112:	60 f9       	bld	r22, 0
 114:	82 e2       	ldi	r24, 0x22	; 34
 116:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 11a:	c3 fb       	bst	r28, 3
 11c:	66 27       	eor	r22, r22
 11e:	60 f9       	bld	r22, 0
 120:	84 e2       	ldi	r24, 0x24	; 36
 122:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	82 e1       	ldi	r24, 0x12	; 18
 12a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 12e:	89 ef       	ldi	r24, 0xF9	; 249
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <SendInstruction+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <SendInstruction+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	82 e1       	ldi	r24, 0x12	; 18
 13e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 142:	89 ef       	ldi	r24, 0xF9	; 249
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <SendInstruction+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <SendInstruction+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <SendData>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	83 e1       	ldi	r24, 0x13	; 19
 15a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 15e:	c4 fb       	bst	r28, 4
 160:	66 27       	eor	r22, r22
 162:	60 f9       	bld	r22, 0
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 16a:	c5 fb       	bst	r28, 5
 16c:	66 27       	eor	r22, r22
 16e:	60 f9       	bld	r22, 0
 170:	81 e2       	ldi	r24, 0x21	; 33
 172:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 176:	c6 fb       	bst	r28, 6
 178:	66 27       	eor	r22, r22
 17a:	60 f9       	bld	r22, 0
 17c:	82 e2       	ldi	r24, 0x22	; 34
 17e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 182:	6c 2f       	mov	r22, r28
 184:	66 1f       	adc	r22, r22
 186:	66 27       	eor	r22, r22
 188:	66 1f       	adc	r22, r22
 18a:	84 e2       	ldi	r24, 0x24	; 36
 18c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e1       	ldi	r24, 0x12	; 18
 194:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 198:	89 ef       	ldi	r24, 0xF9	; 249
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <SendData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <SendData+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e1       	ldi	r24, 0x12	; 18
 1a8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 1ac:	89 ef       	ldi	r24, 0xF9	; 249
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <SendData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <SendData+0x64>
 1b6:	00 00       	nop
 1b8:	6c 2f       	mov	r22, r28
 1ba:	61 70       	andi	r22, 0x01	; 1
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 1c2:	c1 fb       	bst	r28, 1
 1c4:	66 27       	eor	r22, r22
 1c6:	60 f9       	bld	r22, 0
 1c8:	81 e2       	ldi	r24, 0x21	; 33
 1ca:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 1ce:	c2 fb       	bst	r28, 2
 1d0:	66 27       	eor	r22, r22
 1d2:	60 f9       	bld	r22, 0
 1d4:	82 e2       	ldi	r24, 0x22	; 34
 1d6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 1da:	c3 fb       	bst	r28, 3
 1dc:	66 27       	eor	r22, r22
 1de:	60 f9       	bld	r22, 0
 1e0:	84 e2       	ldi	r24, 0x24	; 36
 1e2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	82 e1       	ldi	r24, 0x12	; 18
 1ea:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 1ee:	89 ef       	ldi	r24, 0xF9	; 249
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <SendData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <SendData+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e1       	ldi	r24, 0x12	; 18
 1fe:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <SendData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <SendData+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	83 ed       	ldi	r24, 0xD3	; 211
 214:	90 e3       	ldi	r25, 0x30	; 48
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Init+0x4>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Init+0xa>
 21c:	00 00       	nop
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 49 00 	call	0x92	; 0x92 <SendInstruction>
 224:	88 e2       	ldi	r24, 0x28	; 40
 226:	0e 94 49 00 	call	0x92	; 0x92 <SendInstruction>
 22a:	8c e0       	ldi	r24, 0x0C	; 12
 22c:	0e 94 49 00 	call	0x92	; 0x92 <SendInstruction>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 49 00 	call	0x92	; 0x92 <SendInstruction>
 236:	89 ef       	ldi	r24, 0xF9	; 249
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Init+0x28>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Init+0x2e>
 240:	00 00       	nop
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	0e 94 49 00 	call	0x92	; 0x92 <SendInstruction>
 248:	83 ef       	ldi	r24, 0xF3	; 243
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_Init+0x3a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_Init+0x40>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <LCD_WriteString>:

void LCD_WriteString(u8* str) { 
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
	for (int i=0; str[i] != '\0' ; i++)
 25c:	88 81       	ld	r24, Y
 25e:	88 23       	and	r24, r24
 260:	31 f0       	breq	.+12     	; 0x26e <LCD_WriteString+0x18>
 262:	21 96       	adiw	r28, 0x01	; 1
	{
		SendData(str[i]);
 264:	0e 94 a9 00 	call	0x152	; 0x152 <SendData>
/// @brief  Write Character on the LCD.
/// @param characters
void LCD_WriteChar(u8 character) { SendData(character); }

void LCD_WriteString(u8* str) { 
	for (int i=0; str[i] != '\0' ; i++)
 268:	89 91       	ld	r24, Y+
 26a:	81 11       	cpse	r24, r1
 26c:	fb cf       	rjmp	.-10     	; 0x264 <LCD_WriteString+0xe>
	{
		SendData(str[i]);
	}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <LCD_WriteNumber>:


void LCD_WriteNumber(s32 num)
{
 274:	4f 92       	push	r4
 276:	5f 92       	push	r5
 278:	6f 92       	push	r6
 27a:	7f 92       	push	r7
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	2a 97       	sbiw	r28, 0x0a	; 10
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	6b 01       	movw	r12, r22
 2a0:	7c 01       	movw	r14, r24
	u8 str[10],i=0,j;
	if (num==0)
 2a2:	61 15       	cp	r22, r1
 2a4:	71 05       	cpc	r23, r1
 2a6:	81 05       	cpc	r24, r1
 2a8:	91 05       	cpc	r25, r1
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <LCD_WriteNumber+0x40>
#endif
}

/// @brief  Write Character on the LCD.
/// @param characters
void LCD_WriteChar(u8 character) { SendData(character); }
 2ac:	80 e3       	ldi	r24, 0x30	; 48
 2ae:	0e 94 a9 00 	call	0x152	; 0x152 <SendData>
 2b2:	3e c0       	rjmp	.+124    	; 0x330 <LCD_WriteNumber+0xbc>
	if (num==0)
	{
		LCD_WriteChar('0');
		return;
	}
	if (num<0)
 2b4:	99 23       	and	r25, r25
 2b6:	84 f4       	brge	.+32     	; 0x2d8 <LCD_WriteNumber+0x64>
	{
		num=num*(-1);
 2b8:	f0 94       	com	r15
 2ba:	e0 94       	com	r14
 2bc:	d0 94       	com	r13
 2be:	c0 94       	com	r12
 2c0:	c1 1c       	adc	r12, r1
 2c2:	d1 1c       	adc	r13, r1
 2c4:	e1 1c       	adc	r14, r1
 2c6:	f1 1c       	adc	r15, r1
#endif
}

/// @brief  Write Character on the LCD.
/// @param characters
void LCD_WriteChar(u8 character) { SendData(character); }
 2c8:	8d e2       	ldi	r24, 0x2D	; 45
 2ca:	0e 94 a9 00 	call	0x152	; 0x152 <SendData>
	if (num<0)
	{
		num=num*(-1);
		LCD_WriteChar('-');
	}
	while(num)
 2ce:	c1 14       	cp	r12, r1
 2d0:	d1 04       	cpc	r13, r1
 2d2:	e1 04       	cpc	r14, r1
 2d4:	f1 04       	cpc	r15, r1
 2d6:	61 f1       	breq	.+88     	; 0x330 <LCD_WriteNumber+0xbc>
	}
}


void LCD_WriteNumber(s32 num)
{
 2d8:	10 e0       	ldi	r17, 0x00	; 0
		num=num*(-1);
		LCD_WriteChar('-');
	}
	while(num)
	{
		str[i]=num%10 +'0';
 2da:	0f 2e       	mov	r0, r31
 2dc:	fa e0       	ldi	r31, 0x0A	; 10
 2de:	4f 2e       	mov	r4, r31
 2e0:	51 2c       	mov	r5, r1
 2e2:	61 2c       	mov	r6, r1
 2e4:	71 2c       	mov	r7, r1
 2e6:	f0 2d       	mov	r31, r0
 2e8:	aa 24       	eor	r10, r10
 2ea:	a3 94       	inc	r10
 2ec:	b1 2c       	mov	r11, r1
 2ee:	ac 0e       	add	r10, r28
 2f0:	bd 1e       	adc	r11, r29
 2f2:	a1 0e       	add	r10, r17
 2f4:	b1 1c       	adc	r11, r1
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	a3 01       	movw	r20, r6
 2fc:	92 01       	movw	r18, r4
 2fe:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__divmodsi4>
 302:	60 5d       	subi	r22, 0xD0	; 208
 304:	f5 01       	movw	r30, r10
 306:	60 83       	st	Z, r22
		i++;
 308:	1f 5f       	subi	r17, 0xFF	; 255
		num=num/10;
 30a:	c2 2e       	mov	r12, r18
 30c:	d3 2e       	mov	r13, r19
 30e:	e4 2e       	mov	r14, r20
 310:	f5 2e       	mov	r15, r21
	if (num<0)
	{
		num=num*(-1);
		LCD_WriteChar('-');
	}
	while(num)
 312:	c1 14       	cp	r12, r1
 314:	d1 04       	cpc	r13, r1
 316:	e1 04       	cpc	r14, r1
 318:	f1 04       	cpc	r15, r1
 31a:	31 f7       	brne	.-52     	; 0x2e8 <LCD_WriteNumber+0x74>
	{
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
 31c:	11 23       	and	r17, r17
 31e:	41 f0       	breq	.+16     	; 0x330 <LCD_WriteNumber+0xbc>
	{
		LCD_WriteChar(str[j-1]);
 320:	fe 01       	movw	r30, r28
 322:	e1 0f       	add	r30, r17
 324:	f1 1d       	adc	r31, r1
#endif
}

/// @brief  Write Character on the LCD.
/// @param characters
void LCD_WriteChar(u8 character) { SendData(character); }
 326:	80 81       	ld	r24, Z
 328:	0e 94 a9 00 	call	0x152	; 0x152 <SendData>
	{
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
 32c:	11 50       	subi	r17, 0x01	; 1
 32e:	c1 f7       	brne	.-16     	; 0x320 <LCD_WriteNumber+0xac>
	{
		LCD_WriteChar(str[j-1]);
	}
}
 330:	2a 96       	adiw	r28, 0x0a	; 10
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	7f 90       	pop	r7
 350:	6f 90       	pop	r6
 352:	5f 90       	pop	r5
 354:	4f 90       	pop	r4
 356:	08 95       	ret

00000358 <LCD_ClearDisplay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	89 ef       	ldi	r24, 0xF9	; 249
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_ClearDisplay+0x4>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_ClearDisplay+0xa>
 362:	00 00       	nop

/// @brief
/// @param num
void LCD_ClearDisplay() {
	_delay_ms(1); 
	SendInstruction(0x01);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 49 00 	call	0x92	; 0x92 <SendInstruction>
 36a:	83 ed       	ldi	r24, 0xD3	; 211
 36c:	90 e3       	ldi	r25, 0x30	; 48
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_ClearDisplay+0x16>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_ClearDisplay+0x1c>
 374:	00 00       	nop
 376:	08 95       	ret

00000378 <LCD_GoTo_xy>:
	_delay_ms(50);
	 }

void LCD_GoTo_xy(u8 x_position, u8 y_position) {
	u8 Local_u8address;
	switch(x_position)
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	49 f0       	breq	.+18     	; 0x38e <LCD_GoTo_xy+0x16>
 37c:	28 f0       	brcs	.+10     	; 0x388 <LCD_GoTo_xy+0x10>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	49 f0       	breq	.+18     	; 0x394 <LCD_GoTo_xy+0x1c>
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	51 f0       	breq	.+20     	; 0x39a <LCD_GoTo_xy+0x22>
 386:	0b c0       	rjmp	.+22     	; 0x39e <LCD_GoTo_xy+0x26>
	{
		case 0:
		Local_u8address = y_position + (0x80);
 388:	90 e8       	ldi	r25, 0x80	; 128
 38a:	96 0f       	add	r25, r22
		break;
 38c:	08 c0       	rjmp	.+16     	; 0x39e <LCD_GoTo_xy+0x26>
		case 1:
		Local_u8address = y_position + (0xc0);
 38e:	90 ec       	ldi	r25, 0xC0	; 192
 390:	96 0f       	add	r25, r22
		break;
 392:	05 c0       	rjmp	.+10     	; 0x39e <LCD_GoTo_xy+0x26>
		case 2:
		Local_u8address = y_position + (0x94);
 394:	94 e9       	ldi	r25, 0x94	; 148
 396:	96 0f       	add	r25, r22
		break;
 398:	02 c0       	rjmp	.+4      	; 0x39e <LCD_GoTo_xy+0x26>
		case 3:
		Local_u8address = y_position + (0xd4);
 39a:	94 ed       	ldi	r25, 0xD4	; 212
 39c:	96 0f       	add	r25, r22
		break;
		default:
		break;
	}
	SendInstruction(Local_u8address);
 39e:	89 2f       	mov	r24, r25
 3a0:	0e 94 49 00 	call	0x92	; 0x92 <SendInstruction>
 3a4:	08 95       	ret

000003a6 <EXTI0_Handler>:
}
/*----------------------------------------------------------------------*/
void EXTI0_Handler()
{
	// start the buzzer Function,
	Flag_Alarm = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <Flag_Alarm>
	GPIO_SetValue_Pin(EXRI0_PIN,HIGH);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	82 e4       	ldi	r24, 0x42	; 66
 3b0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 3b4:	08 95       	ret

000003b6 <ADC_Handler>:
/************************************************************************/


/************************************************************************/
void ADC_Handler()
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
	if (Flag_1)
 3ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Flag_1>
 3be:	88 23       	and	r24, r24
 3c0:	f1 f0       	breq	.+60     	; 0x3fe <ADC_Handler+0x48>
	{
		GPIO_SetValue_Pin(GPIO_PC0,HIGH);
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
		ADC_voidReadADC(CHAN_array[0],&Read[0]);
 3ca:	c1 e6       	ldi	r28, 0x61	; 97
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	88 81       	ld	r24, Y
 3d0:	60 ed       	ldi	r22, 0xD0	; 208
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_voidReadADC>
		Read[0] *= 5005/1024;
 3d8:	e0 ed       	ldi	r30, 0xD0	; 208
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	91 81       	ldd	r25, Z+1	; 0x01
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	91 83       	std	Z+1, r25	; 0x01
 3ea:	80 83       	st	Z, r24
		Flag_1 = 0;
 3ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <Flag_1>
		Flag_2 = 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <Flag_2>
		ADC_voidChannelSelect(CHAN_array[1]);
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_voidChannelSelect>
 3fc:	48 c0       	rjmp	.+144    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	}
	else if(Flag_2)
 3fe:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <Flag_2>
 402:	88 23       	and	r24, r24
 404:	f1 f0       	breq	.+60     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		GPIO_SetValue_Pin(GPIO_PC1,HIGH);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	81 e3       	ldi	r24, 0x31	; 49
 40a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
		ADC_voidReadADC(CHAN_array[1],&Read[1]);
 40e:	c1 e6       	ldi	r28, 0x61	; 97
 410:	d0 e0       	ldi	r29, 0x00	; 0
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	62 ed       	ldi	r22, 0xD2	; 210
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_voidReadADC>
		Read[1] *= 5005/1024;
 41c:	e0 ed       	ldi	r30, 0xD0	; 208
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	82 81       	ldd	r24, Z+2	; 0x02
 422:	93 81       	ldd	r25, Z+3	; 0x03
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	93 83       	std	Z+3, r25	; 0x03
 42e:	82 83       	std	Z+2, r24	; 0x02
		Flag_2 = 0;
 430:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Flag_2>
		Flag_3 = 1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <Flag_3>
		ADC_voidChannelSelect(CHAN_array[2]);
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_voidChannelSelect>
 440:	26 c0       	rjmp	.+76     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	}
	else if(Flag_3)
 442:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <Flag_3>
 446:	88 23       	and	r24, r24
 448:	f1 f0       	breq	.+60     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		GPIO_SetValue_Pin(GPIO_PC2,HIGH);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	82 e3       	ldi	r24, 0x32	; 50
 44e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
		ADC_voidReadADC(CHAN_array[2],&Read[2]);
 452:	c1 e6       	ldi	r28, 0x61	; 97
 454:	d0 e0       	ldi	r29, 0x00	; 0
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	64 ed       	ldi	r22, 0xD4	; 212
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_voidReadADC>
		Read[2] *= 5005/1024;
 460:	e0 ed       	ldi	r30, 0xD0	; 208
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	84 81       	ldd	r24, Z+4	; 0x04
 466:	95 81       	ldd	r25, Z+5	; 0x05
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	95 83       	std	Z+5, r25	; 0x05
 472:	84 83       	std	Z+4, r24	; 0x04
		Flag_3 = 0;
 474:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <Flag_3>
		Flag_1 = 1;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Flag_1>
		ADC_voidChannelSelect(CHAN_array[0]);
 47e:	88 81       	ld	r24, Y
 480:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_voidChannelSelect>
 484:	04 c0       	rjmp	.+8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	}
	else{		GPIO_SetValue_Pin(GPIO_PC3,HIGH);}
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	83 e3       	ldi	r24, 0x33	; 51
 48a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <LCD_Presentation>:
/************************************************************************/


/************************************************************************/
void LCD_Presentation(void)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
	Flag_Alarm_Buffer = Flag_Alarm;
 498:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Flag_Alarm>
 49c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Flag_Alarm_Buffer>
	LCD_GoTo_xy(0,0);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_GoTo_xy>
	LCD_WriteString("LDR Value is : ");
 4a8:	84 e6       	ldi	r24, 0x64	; 100
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
	LCD_WriteNumber(Read[0]);
 4b0:	c0 ed       	ldi	r28, 0xD0	; 208
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	68 81       	ld	r22, Y
 4b6:	79 81       	ldd	r23, Y+1	; 0x01
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_WriteNumber>
	LCD_WriteString("  ");
 4c0:	84 e7       	ldi	r24, 0x74	; 116
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
	LCD_GoTo_xy(1,0);
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_GoTo_xy>
	LCD_WriteString("LM35 Value is : ");
 4d0:	87 e7       	ldi	r24, 0x77	; 119
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
	LCD_WriteNumber(Read[1]);
 4d8:	6a 81       	ldd	r22, Y+2	; 0x02
 4da:	7b 81       	ldd	r23, Y+3	; 0x03
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_WriteNumber>
	LCD_WriteString("  ");
 4e4:	84 e7       	ldi	r24, 0x74	; 116
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
	LCD_GoTo_xy(2,0);
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_GoTo_xy>
	LCD_WriteString("LM35 Value is : ");
 4f4:	87 e7       	ldi	r24, 0x77	; 119
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
	LCD_WriteNumber(Read[2]);
 4fc:	6c 81       	ldd	r22, Y+4	; 0x04
 4fe:	7d 81       	ldd	r23, Y+5	; 0x05
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_WriteNumber>
	LCD_WriteString("  ");
 508:	84 e7       	ldi	r24, 0x74	; 116
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
 510:	2f eb       	ldi	r18, 0xBF	; 191
 512:	87 e2       	ldi	r24, 0x27	; 39
 514:	99 e0       	ldi	r25, 0x09	; 9
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <LCD_Presentation+0x82>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <LCD_Presentation+0x8c>
 520:	00 00       	nop
	_delay_ms(3000);
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <ReadingCheck>:
/*----------------------------------------------------------------------*/
void ReadingCheck()
{
	if (Read[0] >= SENSOR_0_MAX_VAL)
 528:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <Read>
 52c:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <Read+0x1>
 530:	80 3d       	cpi	r24, 0xD0	; 208
 532:	97 40       	sbci	r25, 0x07	; 7
 534:	38 f0       	brcs	.+14     	; 0x544 <ReadingCheck+0x1c>
	{
		Alarm_Source = 0;
 536:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Alarm_Source>
		GPIO_SetValue_Pin(EXRI0_PIN,LOW);
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	82 e4       	ldi	r24, 0x42	; 66
 53e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 542:	08 95       	ret
	}
	else if (Read[1] >= SENSOR_1_MAX_VAL)
 544:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <Read+0x2>
 548:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <Read+0x3>
 54c:	84 33       	cpi	r24, 0x34	; 52
 54e:	93 40       	sbci	r25, 0x03	; 3
 550:	40 f0       	brcs	.+16     	; 0x562 <ReadingCheck+0x3a>
	{
		Alarm_Source = 1;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Alarm_Source>
		GPIO_SetValue_Pin(EXRI0_PIN,LOW);
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	82 e4       	ldi	r24, 0x42	; 66
 55c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 560:	08 95       	ret
	}
	else if (Read[2] >= SENSOR_2_MAX_VAL)
 562:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <Read+0x4>
 566:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <Read+0x5>
 56a:	84 33       	cpi	r24, 0x34	; 52
 56c:	93 40       	sbci	r25, 0x03	; 3
 56e:	40 f0       	brcs	.+16     	; 0x580 <ReadingCheck+0x58>
	{
		Alarm_Source = 2;
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Alarm_Source>
		GPIO_SetValue_Pin(EXRI0_PIN,LOW);
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	82 e4       	ldi	r24, 0x42	; 66
 57a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 57e:	08 95       	ret
	}
	else
	{
		Flag_Alarm = 0;
 580:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Flag_Alarm>
 584:	08 95       	ret

00000586 <Alarm_Call>:
	}
}
/*----------------------------------------------------------------------*/
void Alarm_Call()
{
	Flag_Alarm_Buffer = Flag_Alarm;
 586:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Flag_Alarm>
 58a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Flag_Alarm_Buffer>
	if (Flag_Alarm)
 58e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Flag_Alarm>
 592:	88 23       	and	r24, r24
 594:	b9 f1       	breq	.+110    	; 0x604 <Alarm_Call+0x7e>
	{
		// 1 - Turn on the Buzzer.
		GPIO_SetValue_Pin(BUZZER_PIN,HIGH);
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	86 e3       	ldi	r24, 0x36	; 54
 59a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
		// show the source and its Reading on the LCD.
		LCD_GoTo_xy(1,0);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_GoTo_xy>
		switch(Alarm_Source)
 5a6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Alarm_Source>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	89 f0       	breq	.+34     	; 0x5d0 <Alarm_Call+0x4a>
 5ae:	18 f0       	brcs	.+6      	; 0x5b6 <Alarm_Call+0x30>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	d9 f0       	breq	.+54     	; 0x5ea <Alarm_Call+0x64>
 5b4:	08 95       	ret
		{
			case 0:
				LCD_WriteString("Sensor 1 Value is : ");
 5b6:	88 e8       	ldi	r24, 0x88	; 136
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
				LCD_WriteNumber(Read[0]);
 5be:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <Read>
 5c2:	70 91 d1 00 	lds	r23, 0x00D1	; 0x8000d1 <Read+0x1>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_WriteNumber>
			break;
 5ce:	08 95       	ret
			case 1:
				LCD_WriteString("sensor 2 Value is : ");
 5d0:	8d e9       	ldi	r24, 0x9D	; 157
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
				LCD_WriteNumber(Read[1]);
 5d8:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <Read+0x2>
 5dc:	70 91 d3 00 	lds	r23, 0x00D3	; 0x8000d3 <Read+0x3>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_WriteNumber>
			break;
 5e8:	08 95       	ret
			case 2:
				LCD_WriteString("sensor 3 Value is : ");
 5ea:	82 eb       	ldi	r24, 0xB2	; 178
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
				LCD_WriteNumber(Read[2]);
 5f2:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <Read+0x4>
 5f6:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <Read+0x5>
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_WriteNumber>
			break;
 602:	08 95       	ret
			break;
		}
	}
	else
	{
		GPIO_SetValue_Pin(BUZZER_PIN,LOW);
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	86 e3       	ldi	r24, 0x36	; 54
 608:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
 60c:	08 95       	ret

0000060e <main>:

/************************************************************************/
int main(void)
{
	// initializations.
	GPIO_Init();
 60e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <GPIO_Init>
	LCD_Init();
 612:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	ADC_voidInit();
 616:	0e 94 4d 03 	call	0x69a	; 0x69a <ADC_voidInit>
	EXTI_voidInit();
 61a:	0e 94 ae 03 	call	0x75c	; 0x75c <EXTI_voidInit>
 61e:	87 ea       	ldi	r24, 0xA7	; 167
 620:	91 e6       	ldi	r25, 0x61	; 97
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <main+0x14>
 626:	00 c0       	rjmp	.+0      	; 0x628 <main+0x1a>
 628:	00 00       	nop
	_delay_ms(100);
	// Interrupt Set callback functions.
	ADC_SetCallback(ADC_Handler);
 62a:	8b ed       	ldi	r24, 0xDB	; 219
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <ADC_SetCallback>
	EXTI_VID_SET_CALL_BACK(EXTI_INT_0, EXTI0_Handler);
 632:	63 ed       	ldi	r22, 0xD3	; 211
 634:	71 e0       	ldi	r23, 0x01	; 1
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 c7 03 	call	0x78e	; 0x78e <EXTI_VID_SET_CALL_BACK>
	
	// GPIO Settings.
	GPIO_SetValue_Pin(EXRI0_PIN,HIGH); // EXTI0 pin start as High.
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	82 e4       	ldi	r24, 0x42	; 66
 640:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GPIO_SetValue_Pin>
	
	// Interrupts Enabling.
	ADC_voidEnableInt();
 644:	0e 94 75 03 	call	0x6ea	; 0x6ea <ADC_voidEnableInt>
	EXTI_voidEnable(EXTI_INT_0);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 b5 03 	call	0x76a	; 0x76a <EXTI_voidEnable>
	
	// Peripherals Enabling.
	ADC_voidEnable();
 64e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ADC_voidEnable>
	
	// Start the ADC conversion.
	ADC_voidStart_Conversion(CHAN_array[0]);
 652:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <CHAN_array>
 656:	0e 94 77 03 	call	0x6ee	; 0x6ee <ADC_voidStart_Conversion>
	
	// Global Interrupt Enable.
	GIE_voidEnable();
 65a:	0e 94 ac 03 	call	0x758	; 0x758 <GIE_voidEnable>
	while (1)
	{
		
		ReadingCheck();
 65e:	0e 94 94 02 	call	0x528	; 0x528 <ReadingCheck>
		if (Flag_Alarm )
 662:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Flag_Alarm>
 666:	88 23       	and	r24, r24
 668:	51 f0       	breq	.+20     	; 0x67e <main+0x70>
		{
			if (Flag_Alarm_Buffer != Flag_Alarm)
 66a:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <Flag_Alarm_Buffer>
 66e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Flag_Alarm>
 672:	98 13       	cpse	r25, r24
			{
				// clear the display.
				LCD_ClearDisplay();
 674:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_ClearDisplay>
			}
			Alarm_Call();
 678:	0e 94 c3 02 	call	0x586	; 0x586 <Alarm_Call>
 67c:	f0 cf       	rjmp	.-32     	; 0x65e <main+0x50>
		}
		else
		{
			if(!Flag_Alarm)
 67e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Flag_Alarm>
 682:	81 11       	cpse	r24, r1
 684:	ec cf       	rjmp	.-40     	; 0x65e <main+0x50>
			{
				if (Flag_Alarm_Buffer != Flag_Alarm)
 686:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <Flag_Alarm_Buffer>
 68a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Flag_Alarm>
 68e:	98 13       	cpse	r25, r24
				{
					// clear the display.
					LCD_ClearDisplay();
 690:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_ClearDisplay>
				}
				LCD_Presentation();
 694:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_Presentation>
 698:	e2 cf       	rjmp	.-60     	; 0x65e <main+0x50>

0000069a <ADC_voidInit>:
	SET_BIT(*ADCSRA,ADIE);
}
/*------------------------------------------------------*/
void ADC_voidDisableInt()
{
	CLR_BIT(*ADCSRA,ADIE);
 69a:	87 b1       	in	r24, 0x07	; 7
 69c:	17 b8       	out	0x07, r1	; 7
 69e:	3e 9a       	sbi	0x07, 6	; 7
 6a0:	87 b1       	in	r24, 0x07	; 7
 6a2:	87 b9       	out	0x07, r24	; 7
 6a4:	86 b1       	in	r24, 0x06	; 6
 6a6:	16 b8       	out	0x06, r1	; 6
 6a8:	86 b1       	in	r24, 0x06	; 6
 6aa:	86 60       	ori	r24, 0x06	; 6
 6ac:	86 b9       	out	0x06, r24	; 6
 6ae:	35 9a       	sbi	0x06, 5	; 6
 6b0:	80 b7       	in	r24, 0x30	; 48
 6b2:	8f 71       	andi	r24, 0x1F	; 31
 6b4:	80 bf       	out	0x30, r24	; 48
 6b6:	80 b7       	in	r24, 0x30	; 48
 6b8:	80 bf       	out	0x30, r24	; 48
 6ba:	08 95       	ret

000006bc <ADC_voidEnable>:
 6bc:	37 9a       	sbi	0x06, 7	; 6
 6be:	08 95       	ret

000006c0 <ADC_voidReadADC>:
 6c0:	97 b1       	in	r25, 0x07	; 7
 6c2:	98 7f       	andi	r25, 0xF8	; 248
 6c4:	97 b9       	out	0x07, r25	; 7
 6c6:	97 b1       	in	r25, 0x07	; 7
 6c8:	89 2b       	or	r24, r25
 6ca:	87 b9       	out	0x07, r24	; 7
 6cc:	84 b1       	in	r24, 0x04	; 4
 6ce:	95 b1       	in	r25, 0x05	; 5
 6d0:	fb 01       	movw	r30, r22
 6d2:	91 83       	std	Z+1, r25	; 0x01
 6d4:	80 83       	st	Z, r24
 6d6:	15 b8       	out	0x05, r1	; 5
 6d8:	14 b8       	out	0x04, r1	; 4
 6da:	08 95       	ret

000006dc <ADC_voidChannelSelect>:
 6dc:	97 b1       	in	r25, 0x07	; 7
 6de:	98 7f       	andi	r25, 0xF8	; 248
 6e0:	97 b9       	out	0x07, r25	; 7
 6e2:	97 b1       	in	r25, 0x07	; 7
 6e4:	89 2b       	or	r24, r25
 6e6:	87 b9       	out	0x07, r24	; 7
 6e8:	08 95       	ret

000006ea <ADC_voidEnableInt>:
 6ea:	33 9a       	sbi	0x06, 3	; 6
 6ec:	08 95       	ret

000006ee <ADC_voidStart_Conversion>:
}
/*------------------------------------------------------*/
void ADC_voidStart_Conversion(CHAN_NUM chan_num)
{
	// select the channel.
	(*ADMUX) &= (0b11111000);
 6ee:	97 b1       	in	r25, 0x07	; 7
 6f0:	98 7f       	andi	r25, 0xF8	; 248
 6f2:	97 b9       	out	0x07, r25	; 7
	(*ADMUX) |= (chan_num);
 6f4:	97 b1       	in	r25, 0x07	; 7
 6f6:	89 2b       	or	r24, r25
 6f8:	87 b9       	out	0x07, r24	; 7
#if ADC_MODE == ADC_NORMAL_MODE
	SET_BIT(*ADCSRA ,ADSC);
	while(GET_BIT(*ADCSRA ,ADSC));
	
#elif ADC_MODE == ADC_AUTO_TRIGGER_MODE
	SET_BIT(*ADCSRA ,ADSC);
 6fa:	36 9a       	sbi	0x06, 6	; 6
 6fc:	08 95       	ret

000006fe <ADC_SetCallback>:
#endif
}
/*------------------------------------------------------*/
void ADC_SetCallback( void (*ptr) (void) )
{
	ADC_HANDLER = ptr;
 6fe:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__data_end+0x1>
 702:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__data_end>
 706:	08 95       	ret

00000708 <__vector_16>:
}
/*------------------------------------------------------*/
void __vector_16 (void) __attribute__ ((signal,used, externally_visible)); //to avoid optimization
void __vector_16 (void)
{
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	2f 93       	push	r18
 714:	3f 93       	push	r19
 716:	4f 93       	push	r20
 718:	5f 93       	push	r21
 71a:	6f 93       	push	r22
 71c:	7f 93       	push	r23
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	af 93       	push	r26
 724:	bf 93       	push	r27
 726:	ef 93       	push	r30
 728:	ff 93       	push	r31
	ADC_HANDLER();
 72a:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <__data_end>
 72e:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__data_end+0x1>
 732:	09 95       	icall
	SET_BIT(*ADCSRA,ADIF);
 734:	34 9a       	sbi	0x06, 4	; 6
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	bf 91       	pop	r27
 73c:	af 91       	pop	r26
 73e:	9f 91       	pop	r25
 740:	8f 91       	pop	r24
 742:	7f 91       	pop	r23
 744:	6f 91       	pop	r22
 746:	5f 91       	pop	r21
 748:	4f 91       	pop	r20
 74a:	3f 91       	pop	r19
 74c:	2f 91       	pop	r18
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <GIE_voidEnable>:
		(*MCUCR) &= (0b11110011);
		(*MCUCR) |= (SenseCpy << ISC10);
		break;
		case EXTI_INT_2:
		(*MCUCSR) &= (0b10111111);
		(*MCUCSR) |= (SenseCpy << ISC2);
 758:	78 94       	sei
 75a:	08 95       	ret

0000075c <EXTI_voidInit>:
 75c:	85 b7       	in	r24, 0x35	; 53
 75e:	80 7f       	andi	r24, 0xF0	; 240
 760:	85 bf       	out	0x35, r24	; 53
 762:	85 b7       	in	r24, 0x35	; 53
 764:	82 60       	ori	r24, 0x02	; 2
 766:	85 bf       	out	0x35, r24	; 53
 768:	08 95       	ret

0000076a <EXTI_voidEnable>:
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	41 f0       	breq	.+16     	; 0x77e <EXTI_voidEnable+0x14>
 76e:	18 f0       	brcs	.+6      	; 0x776 <EXTI_voidEnable+0xc>
 770:	82 30       	cpi	r24, 0x02	; 2
 772:	49 f0       	breq	.+18     	; 0x786 <EXTI_voidEnable+0x1c>
 774:	08 95       	ret
 776:	8b b7       	in	r24, 0x3b	; 59
 778:	80 64       	ori	r24, 0x40	; 64
 77a:	8b bf       	out	0x3b, r24	; 59
 77c:	08 95       	ret
 77e:	8b b7       	in	r24, 0x3b	; 59
 780:	80 68       	ori	r24, 0x80	; 128
 782:	8b bf       	out	0x3b, r24	; 59
 784:	08 95       	ret
 786:	8b b7       	in	r24, 0x3b	; 59
 788:	80 62       	ori	r24, 0x20	; 32
 78a:	8b bf       	out	0x3b, r24	; 59
 78c:	08 95       	ret

0000078e <EXTI_VID_SET_CALL_BACK>:
	};
}

// callback function
void EXTI_VID_SET_CALL_BACK(INTERRUPT_NUM int_num, void (*PTR)(void)) {
	switch (int_num) {
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	49 f0       	breq	.+18     	; 0x7a4 <EXTI_VID_SET_CALL_BACK+0x16>
 792:	18 f0       	brcs	.+6      	; 0x79a <EXTI_VID_SET_CALL_BACK+0xc>
 794:	82 30       	cpi	r24, 0x02	; 2
 796:	59 f0       	breq	.+22     	; 0x7ae <EXTI_VID_SET_CALL_BACK+0x20>
 798:	08 95       	ret
		case EXTI_INT_0:
		EXTI_0_CALLBACK = PTR;
 79a:	70 93 cf 00 	sts	0x00CF, r23	; 0x8000cf <EXTI_0_CALLBACK+0x1>
 79e:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <EXTI_0_CALLBACK>
		break;
 7a2:	08 95       	ret
		case EXTI_INT_1:
		EXTI_1_CALLBACK = PTR;
 7a4:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <EXTI_1_CALLBACK+0x1>
 7a8:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <EXTI_1_CALLBACK>
		break;
 7ac:	08 95       	ret
		case EXTI_INT_2:
		EXTI_2_CALLBACK = PTR;
 7ae:	70 93 cb 00 	sts	0x00CB, r23	; 0x8000cb <EXTI_2_CALLBACK+0x1>
 7b2:	60 93 ca 00 	sts	0x00CA, r22	; 0x8000ca <EXTI_2_CALLBACK>
 7b6:	08 95       	ret

000007b8 <__vector_1>:

// ISR_FUNCTION:-
/*------------------------------------------------------------------------*/
void __vector_1(void)
__attribute__((signal, used, externally_visible)); // to avoid optimization
void __vector_1(void) {
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	4f 93       	push	r20
 7c8:	5f 93       	push	r21
 7ca:	6f 93       	push	r22
 7cc:	7f 93       	push	r23
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
	EXTI_0_CALLBACK();
 7da:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <EXTI_0_CALLBACK>
 7de:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <EXTI_0_CALLBACK+0x1>
 7e2:	09 95       	icall
	SET_BIT(*GIFR, INTF0);
 7e4:	8a b7       	in	r24, 0x3a	; 58
 7e6:	80 64       	ori	r24, 0x40	; 64
 7e8:	8a bf       	out	0x3a, r24	; 58
}
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <__vector_2>:
/*------------------------------------------------------------------------*/
void __vector_2(void)
__attribute__((signal, used, externally_visible)); // to avoid optmization
void __vector_2(void) {
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
 816:	2f 93       	push	r18
 818:	3f 93       	push	r19
 81a:	4f 93       	push	r20
 81c:	5f 93       	push	r21
 81e:	6f 93       	push	r22
 820:	7f 93       	push	r23
 822:	8f 93       	push	r24
 824:	9f 93       	push	r25
 826:	af 93       	push	r26
 828:	bf 93       	push	r27
 82a:	ef 93       	push	r30
 82c:	ff 93       	push	r31
	EXTI_1_CALLBACK();
 82e:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <EXTI_1_CALLBACK>
 832:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <EXTI_1_CALLBACK+0x1>
 836:	09 95       	icall
	SET_BIT(*GIFR, INTF1);
 838:	8a b7       	in	r24, 0x3a	; 58
 83a:	80 68       	ori	r24, 0x80	; 128
 83c:	8a bf       	out	0x3a, r24	; 58
}
 83e:	ff 91       	pop	r31
 840:	ef 91       	pop	r30
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	7f 91       	pop	r23
 84c:	6f 91       	pop	r22
 84e:	5f 91       	pop	r21
 850:	4f 91       	pop	r20
 852:	3f 91       	pop	r19
 854:	2f 91       	pop	r18
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <__vector_3>:
/*------------------------------------------------------------------------*/
void __vector_3(void)
__attribute__((signal, used, externally_visible)); // to avoid optmization
void __vector_3(void) {
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	2f 93       	push	r18
 86c:	3f 93       	push	r19
 86e:	4f 93       	push	r20
 870:	5f 93       	push	r21
 872:	6f 93       	push	r22
 874:	7f 93       	push	r23
 876:	8f 93       	push	r24
 878:	9f 93       	push	r25
 87a:	af 93       	push	r26
 87c:	bf 93       	push	r27
 87e:	ef 93       	push	r30
 880:	ff 93       	push	r31
	EXTI_2_CALLBACK();
 882:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <EXTI_2_CALLBACK>
 886:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <EXTI_2_CALLBACK+0x1>
 88a:	09 95       	icall
	SET_BIT(*GIFR, INTF2);
 88c:	8a b7       	in	r24, 0x3a	; 58
 88e:	80 62       	ori	r24, 0x20	; 32
 890:	8a bf       	out	0x3a, r24	; 58
 892:	ff 91       	pop	r31
 894:	ef 91       	pop	r30
 896:	bf 91       	pop	r27
 898:	af 91       	pop	r26
 89a:	9f 91       	pop	r25
 89c:	8f 91       	pop	r24
 89e:	7f 91       	pop	r23
 8a0:	6f 91       	pop	r22
 8a2:	5f 91       	pop	r21
 8a4:	4f 91       	pop	r20
 8a6:	3f 91       	pop	r19
 8a8:	2f 91       	pop	r18
 8aa:	0f 90       	pop	r0
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	0f 90       	pop	r0
 8b0:	1f 90       	pop	r1
 8b2:	18 95       	reti

000008b4 <GPIO_Init>:
/// @brief
/// @param
/// @return
/*______________________________________________________________________*/
GPIO_Fun_Status GPIO_Init(void) {
  DDRA->Port = (u8)PORTA_DIRECTION;
 8b4:	8c e0       	ldi	r24, 0x0C	; 12
 8b6:	8a bb       	out	0x1a, r24	; 26
  DDRB->Port = (u8)PORTB_DIRECTION;
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	87 bb       	out	0x17, r24	; 23
  DDRC->Port = (u8)PORTC_DIRECTION;
 8bc:	8f e4       	ldi	r24, 0x4F	; 79
 8be:	84 bb       	out	0x14, r24	; 20
  DDRD->Port = (u8)PORTD_DIRECTION;
 8c0:	84 e8       	ldi	r24, 0x84	; 132
 8c2:	81 bb       	out	0x11, r24	; 17
  return GPIO_OK;
}
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	08 95       	ret

000008c8 <GPIO_SetValue_Pin>:
/// @brief
/// @param
/// @return
/*______________________________________________________________________*/
GPIO_Fun_Status GPIO_SetValue_Pin(u8 Pin, GPIO_OUTPUT_TYPE Output_Type) {
  u8 pin_num = Pin & (0b00001111);
 8c8:	28 2f       	mov	r18, r24
 8ca:	2f 70       	andi	r18, 0x0F	; 15
  u8 port_num = ((Pin & (0b11110000)) >> 4);
  switch (port_num) {
 8cc:	82 95       	swap	r24
 8ce:	8f 70       	andi	r24, 0x0F	; 15
 8d0:	82 30       	cpi	r24, 0x02	; 2
 8d2:	39 f1       	breq	.+78     	; 0x922 <GPIO_SetValue_Pin+0x5a>
 8d4:	18 f4       	brcc	.+6      	; 0x8dc <GPIO_SetValue_Pin+0x14>
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	39 f0       	breq	.+14     	; 0x8e8 <GPIO_SetValue_Pin+0x20>
 8da:	79 c0       	rjmp	.+242    	; 0x9ce <GPIO_SetValue_Pin+0x106>
 8dc:	83 30       	cpi	r24, 0x03	; 3
 8de:	f1 f1       	breq	.+124    	; 0x95c <GPIO_SetValue_Pin+0x94>
 8e0:	84 30       	cpi	r24, 0x04	; 4
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <GPIO_SetValue_Pin+0x1e>
 8e4:	58 c0       	rjmp	.+176    	; 0x996 <GPIO_SetValue_Pin+0xce>
 8e6:	73 c0       	rjmp	.+230    	; 0x9ce <GPIO_SetValue_Pin+0x106>
  case 1:
    CLR_BIT(PORTA->Port, pin_num);
 8e8:	3b b3       	in	r19, 0x1b	; 27
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	02 2e       	mov	r0, r18
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <GPIO_SetValue_Pin+0x2e>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	0a 94       	dec	r0
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <GPIO_SetValue_Pin+0x2a>
 8fa:	48 2f       	mov	r20, r24
 8fc:	40 95       	com	r20
 8fe:	34 23       	and	r19, r20
 900:	3b bb       	out	0x1b, r19	; 27
    if (Output_Type == TOGG) {
 902:	62 30       	cpi	r22, 0x02	; 2
 904:	21 f4       	brne	.+8      	; 0x90e <GPIO_SetValue_Pin+0x46>
      TOG_BIT(PORTA->Port,pin_num);
 906:	9b b3       	in	r25, 0x1b	; 27
 908:	89 27       	eor	r24, r25
 90a:	8b bb       	out	0x1b, r24	; 27
 90c:	60 c0       	rjmp	.+192    	; 0x9ce <GPIO_SetValue_Pin+0x106>
    } else {
      (PORTA->Port) |= (Output_Type << (pin_num));
 90e:	8b b3       	in	r24, 0x1b	; 27
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <GPIO_SetValue_Pin+0x50>
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	2a 95       	dec	r18
 91a:	e2 f7       	brpl	.-8      	; 0x914 <GPIO_SetValue_Pin+0x4c>
 91c:	68 2b       	or	r22, r24
 91e:	6b bb       	out	0x1b, r22	; 27
 920:	56 c0       	rjmp	.+172    	; 0x9ce <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 2:
    CLR_BIT(PORTB->Port, pin_num);
 922:	38 b3       	in	r19, 0x18	; 24
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 2e       	mov	r0, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <GPIO_SetValue_Pin+0x68>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	0a 94       	dec	r0
 932:	e2 f7       	brpl	.-8      	; 0x92c <GPIO_SetValue_Pin+0x64>
 934:	48 2f       	mov	r20, r24
 936:	40 95       	com	r20
 938:	34 23       	and	r19, r20
 93a:	38 bb       	out	0x18, r19	; 24
    if (Output_Type == TOGG) {
 93c:	62 30       	cpi	r22, 0x02	; 2
 93e:	21 f4       	brne	.+8      	; 0x948 <GPIO_SetValue_Pin+0x80>
	 (PORTB->Port) ^= (1 << pin_num);
 940:	98 b3       	in	r25, 0x18	; 24
 942:	89 27       	eor	r24, r25
 944:	88 bb       	out	0x18, r24	; 24
 946:	43 c0       	rjmp	.+134    	; 0x9ce <GPIO_SetValue_Pin+0x106>
    } else {
      (PORTB->Port) |= (Output_Type << (pin_num));
 948:	88 b3       	in	r24, 0x18	; 24
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <GPIO_SetValue_Pin+0x8a>
 94e:	66 0f       	add	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	2a 95       	dec	r18
 954:	e2 f7       	brpl	.-8      	; 0x94e <GPIO_SetValue_Pin+0x86>
 956:	68 2b       	or	r22, r24
 958:	68 bb       	out	0x18, r22	; 24
 95a:	39 c0       	rjmp	.+114    	; 0x9ce <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 3:
    CLR_BIT(PORTC->Port, pin_num);
 95c:	35 b3       	in	r19, 0x15	; 21
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	02 2e       	mov	r0, r18
 964:	02 c0       	rjmp	.+4      	; 0x96a <GPIO_SetValue_Pin+0xa2>
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	0a 94       	dec	r0
 96c:	e2 f7       	brpl	.-8      	; 0x966 <GPIO_SetValue_Pin+0x9e>
 96e:	48 2f       	mov	r20, r24
 970:	40 95       	com	r20
 972:	34 23       	and	r19, r20
 974:	35 bb       	out	0x15, r19	; 21
    if (Output_Type == TOGG) {
 976:	62 30       	cpi	r22, 0x02	; 2
 978:	21 f4       	brne	.+8      	; 0x982 <GPIO_SetValue_Pin+0xba>
     TOG_BIT(PORTC->Port,pin_num);
 97a:	95 b3       	in	r25, 0x15	; 21
 97c:	89 27       	eor	r24, r25
 97e:	85 bb       	out	0x15, r24	; 21
 980:	26 c0       	rjmp	.+76     	; 0x9ce <GPIO_SetValue_Pin+0x106>
    } else {
      (PORTC->Port) |= (Output_Type << (pin_num));
 982:	85 b3       	in	r24, 0x15	; 21
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <GPIO_SetValue_Pin+0xc4>
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	2a 95       	dec	r18
 98e:	e2 f7       	brpl	.-8      	; 0x988 <GPIO_SetValue_Pin+0xc0>
 990:	68 2b       	or	r22, r24
 992:	65 bb       	out	0x15, r22	; 21
 994:	1c c0       	rjmp	.+56     	; 0x9ce <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 4:
    CLR_BIT(PORTD->Port, pin_num);
 996:	32 b3       	in	r19, 0x12	; 18
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 2e       	mov	r0, r18
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <GPIO_SetValue_Pin+0xdc>
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	0a 94       	dec	r0
 9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <GPIO_SetValue_Pin+0xd8>
 9a8:	48 2f       	mov	r20, r24
 9aa:	40 95       	com	r20
 9ac:	34 23       	and	r19, r20
 9ae:	32 bb       	out	0x12, r19	; 18
    if (Output_Type == TOGG) {
 9b0:	62 30       	cpi	r22, 0x02	; 2
 9b2:	21 f4       	brne	.+8      	; 0x9bc <GPIO_SetValue_Pin+0xf4>
      TOG_BIT(PORTD->Port,pin_num);
 9b4:	92 b3       	in	r25, 0x12	; 18
 9b6:	89 27       	eor	r24, r25
 9b8:	82 bb       	out	0x12, r24	; 18
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <GPIO_SetValue_Pin+0x106>
    } else {
      (PORTD->Port) |= (Output_Type << (pin_num));
 9bc:	82 b3       	in	r24, 0x12	; 18
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <GPIO_SetValue_Pin+0xfe>
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	2a 95       	dec	r18
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <GPIO_SetValue_Pin+0xfa>
 9ca:	68 2b       	or	r22, r24
 9cc:	62 bb       	out	0x12, r22	; 18
    break;
  default:
    break;
  }
  return GPIO_OK;
}
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	08 95       	ret

000009d2 <__divmodsi4>:
 9d2:	05 2e       	mov	r0, r21
 9d4:	97 fb       	bst	r25, 7
 9d6:	1e f4       	brtc	.+6      	; 0x9de <__divmodsi4+0xc>
 9d8:	00 94       	com	r0
 9da:	0e 94 00 05 	call	0xa00	; 0xa00 <__negsi2>
 9de:	57 fd       	sbrc	r21, 7
 9e0:	07 d0       	rcall	.+14     	; 0x9f0 <__divmodsi4_neg2>
 9e2:	0e 94 08 05 	call	0xa10	; 0xa10 <__udivmodsi4>
 9e6:	07 fc       	sbrc	r0, 7
 9e8:	03 d0       	rcall	.+6      	; 0x9f0 <__divmodsi4_neg2>
 9ea:	4e f4       	brtc	.+18     	; 0x9fe <__divmodsi4_exit>
 9ec:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__negsi2>

000009f0 <__divmodsi4_neg2>:
 9f0:	50 95       	com	r21
 9f2:	40 95       	com	r20
 9f4:	30 95       	com	r19
 9f6:	21 95       	neg	r18
 9f8:	3f 4f       	sbci	r19, 0xFF	; 255
 9fa:	4f 4f       	sbci	r20, 0xFF	; 255
 9fc:	5f 4f       	sbci	r21, 0xFF	; 255

000009fe <__divmodsi4_exit>:
 9fe:	08 95       	ret

00000a00 <__negsi2>:
 a00:	90 95       	com	r25
 a02:	80 95       	com	r24
 a04:	70 95       	com	r23
 a06:	61 95       	neg	r22
 a08:	7f 4f       	sbci	r23, 0xFF	; 255
 a0a:	8f 4f       	sbci	r24, 0xFF	; 255
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__udivmodsi4>:
 a10:	a1 e2       	ldi	r26, 0x21	; 33
 a12:	1a 2e       	mov	r1, r26
 a14:	aa 1b       	sub	r26, r26
 a16:	bb 1b       	sub	r27, r27
 a18:	fd 01       	movw	r30, r26
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <__udivmodsi4_ep>

00000a1c <__udivmodsi4_loop>:
 a1c:	aa 1f       	adc	r26, r26
 a1e:	bb 1f       	adc	r27, r27
 a20:	ee 1f       	adc	r30, r30
 a22:	ff 1f       	adc	r31, r31
 a24:	a2 17       	cp	r26, r18
 a26:	b3 07       	cpc	r27, r19
 a28:	e4 07       	cpc	r30, r20
 a2a:	f5 07       	cpc	r31, r21
 a2c:	20 f0       	brcs	.+8      	; 0xa36 <__udivmodsi4_ep>
 a2e:	a2 1b       	sub	r26, r18
 a30:	b3 0b       	sbc	r27, r19
 a32:	e4 0b       	sbc	r30, r20
 a34:	f5 0b       	sbc	r31, r21

00000a36 <__udivmodsi4_ep>:
 a36:	66 1f       	adc	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	1a 94       	dec	r1
 a40:	69 f7       	brne	.-38     	; 0xa1c <__udivmodsi4_loop>
 a42:	60 95       	com	r22
 a44:	70 95       	com	r23
 a46:	80 95       	com	r24
 a48:	90 95       	com	r25
 a4a:	9b 01       	movw	r18, r22
 a4c:	ac 01       	movw	r20, r24
 a4e:	bd 01       	movw	r22, r26
 a50:	cf 01       	movw	r24, r30
 a52:	08 95       	ret

00000a54 <_exit>:
 a54:	f8 94       	cli

00000a56 <__stop_program>:
 a56:	ff cf       	rjmp	.-2      	; 0xa56 <__stop_program>
