
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001256  000012ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017e  00800074  00800074  000012fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ec1  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be8  00000000  00000000  0000334d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e01  00000000  00000000  00003f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00004d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075e  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a3  00000000  00000000  0000583a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006add  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 07 	call	0xe16	; 0xe16 <main>
      8a:	0c 94 29 09 	jmp	0x1252	; 0x1252 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ROWS_Activation>:
  }
  return returned_Val;
}

/*--------------------------------------------------------------------------*/
static void ROWS_Activation(u8 row_num) {
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
  // Set All Rows.
  GPIO_SetValue_Pin(ROW_1, HIGH);
      96:	61 e0       	ldi	r22, 0x01	; 1
      98:	85 e3       	ldi	r24, 0x35	; 53
      9a:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
  GPIO_SetValue_Pin(ROW_2, HIGH);
      9e:	61 e0       	ldi	r22, 0x01	; 1
      a0:	84 e3       	ldi	r24, 0x34	; 52
      a2:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
  GPIO_SetValue_Pin(ROW_3, HIGH);
      a6:	61 e0       	ldi	r22, 0x01	; 1
      a8:	83 e3       	ldi	r24, 0x33	; 51
      aa:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
  GPIO_SetValue_Pin(ROW_4, HIGH);
      ae:	61 e0       	ldi	r22, 0x01	; 1
      b0:	82 e3       	ldi	r24, 0x32	; 50
      b2:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
  // Reset the given Row.
  GPIO_SetValue_Pin(row_num, LOW);
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	8c 2f       	mov	r24, r28
      ba:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
      be:	cf 91       	pop	r28
      c0:	08 95       	ret

000000c2 <KEYPAD_Read>:

static void ROWS_Activation(u8 row_num);

/// @brief  this Function is used to get a character value from the KEYPAD.
/// @return
u8 KEYPAD_Read() {
      c2:	8f 92       	push	r8
      c4:	9f 92       	push	r9
      c6:	af 92       	push	r10
      c8:	bf 92       	push	r11
      ca:	cf 92       	push	r12
      cc:	df 92       	push	r13
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
  u8 returned_Val = '\0';
  // Check Row_1:
  ROWS_Activation(ROW_1);
      da:	85 e3       	ldi	r24, 0x35	; 53
      dc:	0e 94 49 00 	call	0x92	; 0x92 <ROWS_Activation>
      e0:	0f 2e       	mov	r0, r31
      e2:	f0 e7       	ldi	r31, 0x70	; 112
      e4:	ef 2e       	mov	r14, r31
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	ff 2e       	mov	r15, r31
      ea:	f0 2d       	mov	r31, r0
      ec:	0f 2e       	mov	r0, r31
      ee:	f0 e6       	ldi	r31, 0x60	; 96
      f0:	cf 2e       	mov	r12, r31
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	df 2e       	mov	r13, r31
      f6:	f0 2d       	mov	r31, r0
      f8:	04 e7       	ldi	r16, 0x74	; 116
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	46 01       	movw	r8, r12
      fe:	57 01       	movw	r10, r14
static void ROWS_Activation(u8 row_num);

/// @brief  this Function is used to get a character value from the KEYPAD.
/// @return
u8 KEYPAD_Read() {
  u8 returned_Val = '\0';
     100:	d0 e0       	ldi	r29, 0x00	; 0
  // Check Row_1:
  ROWS_Activation(ROW_1);
  for (int i = 0; i < 4; i++) {
    if (!(GPIO_ReadValue_Pin(COLU_ARRAY[i]))) {
     102:	f5 01       	movw	r30, r10
     104:	c1 91       	ld	r28, Z+
     106:	5f 01       	movw	r10, r30
     108:	8c 2f       	mov	r24, r28
     10a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     10e:	81 11       	cpse	r24, r1
     110:	07 c0       	rjmp	.+14     	; 0x120 <KEYPAD_Read+0x5e>
      returned_Val = Data_Array[0][i];
     112:	f4 01       	movw	r30, r8
     114:	d0 81       	ld	r29, Z
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
     116:	8c 2f       	mov	r24, r28
     118:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     11c:	88 23       	and	r24, r24
     11e:	d9 f3       	breq	.-10     	; 0x116 <KEYPAD_Read+0x54>
     120:	ff ef       	ldi	r31, 0xFF	; 255
     122:	8f 1a       	sub	r8, r31
     124:	9f 0a       	sbc	r9, r31
/// @return
u8 KEYPAD_Read() {
  u8 returned_Val = '\0';
  // Check Row_1:
  ROWS_Activation(ROW_1);
  for (int i = 0; i < 4; i++) {
     126:	a0 16       	cp	r10, r16
     128:	b1 06       	cpc	r11, r17
     12a:	59 f7       	brne	.-42     	; 0x102 <KEYPAD_Read+0x40>
      returned_Val = Data_Array[0][i];
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
        ;
    }
  }
  ROWS_Activation(ROW_2);
     12c:	84 e3       	ldi	r24, 0x34	; 52
     12e:	0e 94 49 00 	call	0x92	; 0x92 <ROWS_Activation>
     132:	0f 2e       	mov	r0, r31
     134:	f0 e6       	ldi	r31, 0x60	; 96
     136:	8f 2e       	mov	r8, r31
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	9f 2e       	mov	r9, r31
     13c:	f0 2d       	mov	r31, r0
     13e:	0f 2e       	mov	r0, r31
     140:	f0 e7       	ldi	r31, 0x70	; 112
     142:	af 2e       	mov	r10, r31
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	bf 2e       	mov	r11, r31
     148:	f0 2d       	mov	r31, r0
  for (int i = 0; i < 4; i++) {
    if (!(GPIO_ReadValue_Pin(COLU_ARRAY[i]))) {
     14a:	f5 01       	movw	r30, r10
     14c:	c1 91       	ld	r28, Z+
     14e:	5f 01       	movw	r10, r30
     150:	8c 2f       	mov	r24, r28
     152:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     156:	81 11       	cpse	r24, r1
     158:	07 c0       	rjmp	.+14     	; 0x168 <KEYPAD_Read+0xa6>
      returned_Val = Data_Array[1][i];
     15a:	f4 01       	movw	r30, r8
     15c:	d4 81       	ldd	r29, Z+4	; 0x04
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
     15e:	8c 2f       	mov	r24, r28
     160:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     164:	88 23       	and	r24, r24
     166:	d9 f3       	breq	.-10     	; 0x15e <KEYPAD_Read+0x9c>
     168:	ff ef       	ldi	r31, 0xFF	; 255
     16a:	8f 1a       	sub	r8, r31
     16c:	9f 0a       	sbc	r9, r31
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
        ;
    }
  }
  ROWS_Activation(ROW_2);
  for (int i = 0; i < 4; i++) {
     16e:	a0 16       	cp	r10, r16
     170:	b1 06       	cpc	r11, r17
     172:	59 f7       	brne	.-42     	; 0x14a <KEYPAD_Read+0x88>
      returned_Val = Data_Array[1][i];
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
        ;
    }
  }
  ROWS_Activation(ROW_3);
     174:	83 e3       	ldi	r24, 0x33	; 51
     176:	0e 94 49 00 	call	0x92	; 0x92 <ROWS_Activation>
     17a:	0f 2e       	mov	r0, r31
     17c:	f0 e6       	ldi	r31, 0x60	; 96
     17e:	8f 2e       	mov	r8, r31
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	9f 2e       	mov	r9, r31
     184:	f0 2d       	mov	r31, r0
     186:	0f 2e       	mov	r0, r31
     188:	f0 e7       	ldi	r31, 0x70	; 112
     18a:	af 2e       	mov	r10, r31
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	bf 2e       	mov	r11, r31
     190:	f0 2d       	mov	r31, r0
  for (int i = 0; i < 4; i++) {
    if (!(GPIO_ReadValue_Pin(COLU_ARRAY[i]))) {
     192:	f5 01       	movw	r30, r10
     194:	c1 91       	ld	r28, Z+
     196:	5f 01       	movw	r10, r30
     198:	8c 2f       	mov	r24, r28
     19a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     19e:	81 11       	cpse	r24, r1
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <KEYPAD_Read+0xee>
      returned_Val = Data_Array[2][i];
     1a2:	f4 01       	movw	r30, r8
     1a4:	d0 85       	ldd	r29, Z+8	; 0x08
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
     1a6:	8c 2f       	mov	r24, r28
     1a8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     1ac:	88 23       	and	r24, r24
     1ae:	d9 f3       	breq	.-10     	; 0x1a6 <KEYPAD_Read+0xe4>
     1b0:	ff ef       	ldi	r31, 0xFF	; 255
     1b2:	8f 1a       	sub	r8, r31
     1b4:	9f 0a       	sbc	r9, r31
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
        ;
    }
  }
  ROWS_Activation(ROW_3);
  for (int i = 0; i < 4; i++) {
     1b6:	a0 16       	cp	r10, r16
     1b8:	b1 06       	cpc	r11, r17
     1ba:	59 f7       	brne	.-42     	; 0x192 <KEYPAD_Read+0xd0>
      returned_Val = Data_Array[2][i];
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
        ;
    }
  }
  ROWS_Activation(ROW_4);
     1bc:	82 e3       	ldi	r24, 0x32	; 50
     1be:	0e 94 49 00 	call	0x92	; 0x92 <ROWS_Activation>
  for (int i = 0; i < 4; i++) {
    if (!(GPIO_ReadValue_Pin(COLU_ARRAY[i]))) {
     1c2:	f7 01       	movw	r30, r14
     1c4:	c1 91       	ld	r28, Z+
     1c6:	7f 01       	movw	r14, r30
     1c8:	8c 2f       	mov	r24, r28
     1ca:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     1ce:	81 11       	cpse	r24, r1
     1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <KEYPAD_Read+0x11e>
      returned_Val = Data_Array[3][i];
     1d2:	f6 01       	movw	r30, r12
     1d4:	d4 85       	ldd	r29, Z+12	; 0x0c
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
     1d6:	8c 2f       	mov	r24, r28
     1d8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GPIO_ReadValue_Pin>
     1dc:	88 23       	and	r24, r24
     1de:	d9 f3       	breq	.-10     	; 0x1d6 <KEYPAD_Read+0x114>
     1e0:	ff ef       	ldi	r31, 0xFF	; 255
     1e2:	cf 1a       	sub	r12, r31
     1e4:	df 0a       	sbc	r13, r31
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
        ;
    }
  }
  ROWS_Activation(ROW_4);
  for (int i = 0; i < 4; i++) {
     1e6:	e0 16       	cp	r14, r16
     1e8:	f1 06       	cpc	r15, r17
     1ea:	59 f7       	brne	.-42     	; 0x1c2 <KEYPAD_Read+0x100>
      while (!GPIO_ReadValue_Pin(COLU_ARRAY[i]))
        ;
    }
  }
  return returned_Val;
}
     1ec:	8d 2f       	mov	r24, r29
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	ef 90       	pop	r14
     1fa:	df 90       	pop	r13
     1fc:	cf 90       	pop	r12
     1fe:	bf 90       	pop	r11
     200:	af 90       	pop	r10
     202:	9f 90       	pop	r9
     204:	8f 90       	pop	r8
     206:	08 95       	ret

00000208 <SendInstruction>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     208:	cf 93       	push	r28
     20a:	c8 2f       	mov	r28, r24
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	83 e1       	ldi	r24, 0x13	; 19
     210:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     214:	c4 fb       	bst	r28, 4
     216:	66 27       	eor	r22, r22
     218:	60 f9       	bld	r22, 0
     21a:	80 e2       	ldi	r24, 0x20	; 32
     21c:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     220:	c5 fb       	bst	r28, 5
     222:	66 27       	eor	r22, r22
     224:	60 f9       	bld	r22, 0
     226:	81 e2       	ldi	r24, 0x21	; 33
     228:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     22c:	c6 fb       	bst	r28, 6
     22e:	66 27       	eor	r22, r22
     230:	60 f9       	bld	r22, 0
     232:	82 e2       	ldi	r24, 0x22	; 34
     234:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     238:	6c 2f       	mov	r22, r28
     23a:	66 1f       	adc	r22, r22
     23c:	66 27       	eor	r22, r22
     23e:	66 1f       	adc	r22, r22
     240:	84 e2       	ldi	r24, 0x24	; 36
     242:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	82 e1       	ldi	r24, 0x12	; 18
     24a:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     24e:	89 ef       	ldi	r24, 0xF9	; 249
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <SendInstruction+0x4a>
     256:	00 c0       	rjmp	.+0      	; 0x258 <SendInstruction+0x50>
     258:	00 00       	nop
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	82 e1       	ldi	r24, 0x12	; 18
     25e:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     262:	89 ef       	ldi	r24, 0xF9	; 249
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <SendInstruction+0x5e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <SendInstruction+0x64>
     26c:	00 00       	nop
     26e:	6c 2f       	mov	r22, r28
     270:	61 70       	andi	r22, 0x01	; 1
     272:	80 e2       	ldi	r24, 0x20	; 32
     274:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     278:	c1 fb       	bst	r28, 1
     27a:	66 27       	eor	r22, r22
     27c:	60 f9       	bld	r22, 0
     27e:	81 e2       	ldi	r24, 0x21	; 33
     280:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     284:	c2 fb       	bst	r28, 2
     286:	66 27       	eor	r22, r22
     288:	60 f9       	bld	r22, 0
     28a:	82 e2       	ldi	r24, 0x22	; 34
     28c:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     290:	c3 fb       	bst	r28, 3
     292:	66 27       	eor	r22, r22
     294:	60 f9       	bld	r22, 0
     296:	84 e2       	ldi	r24, 0x24	; 36
     298:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 e1       	ldi	r24, 0x12	; 18
     2a0:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     2a4:	89 ef       	ldi	r24, 0xF9	; 249
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <SendInstruction+0xa0>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <SendInstruction+0xa6>
     2ae:	00 00       	nop
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	82 e1       	ldi	r24, 0x12	; 18
     2b4:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     2b8:	89 ef       	ldi	r24, 0xF9	; 249
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <SendInstruction+0xb4>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <SendInstruction+0xba>
     2c2:	00 00       	nop
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <SendData>:
     2c8:	cf 93       	push	r28
     2ca:	c8 2f       	mov	r28, r24
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	83 e1       	ldi	r24, 0x13	; 19
     2d0:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     2d4:	c4 fb       	bst	r28, 4
     2d6:	66 27       	eor	r22, r22
     2d8:	60 f9       	bld	r22, 0
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     2e0:	c5 fb       	bst	r28, 5
     2e2:	66 27       	eor	r22, r22
     2e4:	60 f9       	bld	r22, 0
     2e6:	81 e2       	ldi	r24, 0x21	; 33
     2e8:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     2ec:	c6 fb       	bst	r28, 6
     2ee:	66 27       	eor	r22, r22
     2f0:	60 f9       	bld	r22, 0
     2f2:	82 e2       	ldi	r24, 0x22	; 34
     2f4:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     2f8:	6c 2f       	mov	r22, r28
     2fa:	66 1f       	adc	r22, r22
     2fc:	66 27       	eor	r22, r22
     2fe:	66 1f       	adc	r22, r22
     300:	84 e2       	ldi	r24, 0x24	; 36
     302:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	82 e1       	ldi	r24, 0x12	; 18
     30a:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     30e:	89 ef       	ldi	r24, 0xF9	; 249
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <SendData+0x4a>
     316:	00 c0       	rjmp	.+0      	; 0x318 <SendData+0x50>
     318:	00 00       	nop
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	82 e1       	ldi	r24, 0x12	; 18
     31e:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     322:	89 ef       	ldi	r24, 0xF9	; 249
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <SendData+0x5e>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <SendData+0x64>
     32c:	00 00       	nop
     32e:	6c 2f       	mov	r22, r28
     330:	61 70       	andi	r22, 0x01	; 1
     332:	80 e2       	ldi	r24, 0x20	; 32
     334:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     338:	c1 fb       	bst	r28, 1
     33a:	66 27       	eor	r22, r22
     33c:	60 f9       	bld	r22, 0
     33e:	81 e2       	ldi	r24, 0x21	; 33
     340:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     344:	c2 fb       	bst	r28, 2
     346:	66 27       	eor	r22, r22
     348:	60 f9       	bld	r22, 0
     34a:	82 e2       	ldi	r24, 0x22	; 34
     34c:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     350:	c3 fb       	bst	r28, 3
     352:	66 27       	eor	r22, r22
     354:	60 f9       	bld	r22, 0
     356:	84 e2       	ldi	r24, 0x24	; 36
     358:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	82 e1       	ldi	r24, 0x12	; 18
     360:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     364:	89 ef       	ldi	r24, 0xF9	; 249
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <SendData+0xa0>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <SendData+0xa6>
     36e:	00 00       	nop
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	82 e1       	ldi	r24, 0x12	; 18
     374:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     378:	89 ef       	ldi	r24, 0xF9	; 249
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <SendData+0xb4>
     380:	00 c0       	rjmp	.+0      	; 0x382 <SendData+0xba>
     382:	00 00       	nop
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <LCD_Init>:
     388:	83 ed       	ldi	r24, 0xD3	; 211
     38a:	90 e3       	ldi	r25, 0x30	; 48
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_Init+0x4>
     390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_Init+0xa>
     392:	00 00       	nop
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	0e 94 04 01 	call	0x208	; 0x208 <SendInstruction>
     39a:	88 e2       	ldi	r24, 0x28	; 40
     39c:	0e 94 04 01 	call	0x208	; 0x208 <SendInstruction>
     3a0:	8c e0       	ldi	r24, 0x0C	; 12
     3a2:	0e 94 04 01 	call	0x208	; 0x208 <SendInstruction>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 04 01 	call	0x208	; 0x208 <SendInstruction>
     3ac:	89 ef       	ldi	r24, 0xF9	; 249
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_Init+0x28>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_Init+0x2e>
     3b6:	00 00       	nop
     3b8:	86 e0       	ldi	r24, 0x06	; 6
     3ba:	0e 94 04 01 	call	0x208	; 0x208 <SendInstruction>
     3be:	83 ef       	ldi	r24, 0xF3	; 243
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCD_Init+0x3a>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_Init+0x40>
     3c8:	00 00       	nop
     3ca:	08 95       	ret

000003cc <LCD_WriteChar>:
     3cc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SendData>
     3d0:	08 95       	ret

000003d2 <LCD_WriteNumber>:
     3d2:	4f 92       	push	r4
     3d4:	5f 92       	push	r5
     3d6:	6f 92       	push	r6
     3d8:	7f 92       	push	r7
     3da:	af 92       	push	r10
     3dc:	bf 92       	push	r11
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	2a 97       	sbiw	r28, 0x0a	; 10
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	6b 01       	movw	r12, r22
     3fe:	7c 01       	movw	r14, r24
     400:	61 15       	cp	r22, r1
     402:	71 05       	cpc	r23, r1
     404:	81 05       	cpc	r24, r1
     406:	91 05       	cpc	r25, r1
     408:	21 f4       	brne	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40a:	80 e3       	ldi	r24, 0x30	; 48
     40c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SendData>
     410:	3e c0       	rjmp	.+124    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     412:	99 23       	and	r25, r25
     414:	84 f4       	brge	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     416:	f0 94       	com	r15
     418:	e0 94       	com	r14
     41a:	d0 94       	com	r13
     41c:	c0 94       	com	r12
     41e:	c1 1c       	adc	r12, r1
     420:	d1 1c       	adc	r13, r1
     422:	e1 1c       	adc	r14, r1
     424:	f1 1c       	adc	r15, r1
     426:	8d e2       	ldi	r24, 0x2D	; 45
     428:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SendData>
     42c:	c1 14       	cp	r12, r1
     42e:	d1 04       	cpc	r13, r1
     430:	e1 04       	cpc	r14, r1
     432:	f1 04       	cpc	r15, r1
     434:	61 f1       	breq	.+88     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	0f 2e       	mov	r0, r31
     43a:	fa e0       	ldi	r31, 0x0A	; 10
     43c:	4f 2e       	mov	r4, r31
     43e:	51 2c       	mov	r5, r1
     440:	61 2c       	mov	r6, r1
     442:	71 2c       	mov	r7, r1
     444:	f0 2d       	mov	r31, r0
     446:	aa 24       	eor	r10, r10
     448:	a3 94       	inc	r10
     44a:	b1 2c       	mov	r11, r1
     44c:	ac 0e       	add	r10, r28
     44e:	bd 1e       	adc	r11, r29
     450:	a1 0e       	add	r10, r17
     452:	b1 1c       	adc	r11, r1
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	a3 01       	movw	r20, r6
     45a:	92 01       	movw	r18, r4
     45c:	0e 94 f6 07 	call	0xfec	; 0xfec <__divmodsi4>
     460:	60 5d       	subi	r22, 0xD0	; 208
     462:	f5 01       	movw	r30, r10
     464:	60 83       	st	Z, r22
     466:	1f 5f       	subi	r17, 0xFF	; 255
     468:	c2 2e       	mov	r12, r18
     46a:	d3 2e       	mov	r13, r19
     46c:	e4 2e       	mov	r14, r20
     46e:	f5 2e       	mov	r15, r21
     470:	c1 14       	cp	r12, r1
     472:	d1 04       	cpc	r13, r1
     474:	e1 04       	cpc	r14, r1
     476:	f1 04       	cpc	r15, r1
     478:	31 f7       	brne	.-52     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     47a:	11 23       	and	r17, r17
     47c:	41 f0       	breq	.+16     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     47e:	fe 01       	movw	r30, r28
     480:	e1 0f       	add	r30, r17
     482:	f1 1d       	adc	r31, r1
     484:	80 81       	ld	r24, Z
     486:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SendData>
     48a:	11 50       	subi	r17, 0x01	; 1
     48c:	c1 f7       	brne	.-16     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     48e:	2a 96       	adiw	r28, 0x0a	; 10
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	af 90       	pop	r10
     4ac:	7f 90       	pop	r7
     4ae:	6f 90       	pop	r6
     4b0:	5f 90       	pop	r5
     4b2:	4f 90       	pop	r4
     4b4:	08 95       	ret

000004b6 <LCD_GoTo_xy>:
	_delay_ms(50);
	 }

void LCD_GoTo_xy(u8 x_position, u8 y_position) {
	u8 Local_u8address;
	switch(x_position)
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	49 f0       	breq	.+18     	; 0x4cc <LCD_GoTo_xy+0x16>
     4ba:	28 f0       	brcs	.+10     	; 0x4c6 <LCD_GoTo_xy+0x10>
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	49 f0       	breq	.+18     	; 0x4d2 <LCD_GoTo_xy+0x1c>
     4c0:	83 30       	cpi	r24, 0x03	; 3
     4c2:	51 f0       	breq	.+20     	; 0x4d8 <LCD_GoTo_xy+0x22>
     4c4:	0b c0       	rjmp	.+22     	; 0x4dc <LCD_GoTo_xy+0x26>
	{
		case 0:
		Local_u8address = y_position + (0x80);
     4c6:	90 e8       	ldi	r25, 0x80	; 128
     4c8:	96 0f       	add	r25, r22
		break;
     4ca:	08 c0       	rjmp	.+16     	; 0x4dc <LCD_GoTo_xy+0x26>
		case 1:
		Local_u8address = y_position + (0xc0);
     4cc:	90 ec       	ldi	r25, 0xC0	; 192
     4ce:	96 0f       	add	r25, r22
		break;
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <LCD_GoTo_xy+0x26>
		case 2:
		Local_u8address = y_position + (0x94);
     4d2:	94 e9       	ldi	r25, 0x94	; 148
     4d4:	96 0f       	add	r25, r22
		break;
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <LCD_GoTo_xy+0x26>
		case 3:
		Local_u8address = y_position + (0xd4);
     4d8:	94 ed       	ldi	r25, 0xD4	; 212
     4da:	96 0f       	add	r25, r22
		break;
		default:
		break;
	}
	SendInstruction(Local_u8address);
     4dc:	89 2f       	mov	r24, r25
     4de:	0e 94 04 01 	call	0x208	; 0x208 <SendInstruction>
     4e2:	08 95       	ret

000004e4 <SortProcesses>:
}
/*-------------------------------------------------------------------*/
void	Load_Number(OPERAND *operand ,u8 num) // [work].
{
	operand -> Operand_arr[(operand ->Operand_counter)] = num; 
	operand ->Operand_counter++;
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <Global_counter>
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	db 01       	movw	r26, r22
     500:	11 97       	sbiw	r26, 0x01	; 1
     502:	1a 16       	cp	r1, r26
     504:	1b 06       	cpc	r1, r27
     506:	0c f4       	brge	.+2      	; 0x50a <SortProcesses+0x26>
     508:	41 c0       	rjmp	.+130    	; 0x58c <SortProcesses+0xa8>
     50a:	4f c0       	rjmp	.+158    	; 0x5aa <SortProcesses+0xc6>
     50c:	2e 2d       	mov	r18, r14
     50e:	3f 2d       	mov	r19, r15
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	c9 01       	movw	r24, r18
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	e9 01       	movw	r28, r18
     518:	cc 0f       	add	r28, r28
     51a:	dd 1f       	adc	r29, r29
     51c:	c2 0f       	add	r28, r18
     51e:	d3 1f       	adc	r29, r19
     520:	c9 55       	subi	r28, 0x59	; 89
     522:	df 4f       	sbci	r29, 0xFF	; 255
     524:	fc 01       	movw	r30, r24
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	e8 0f       	add	r30, r24
     52c:	f9 1f       	adc	r31, r25
     52e:	e9 55       	subi	r30, 0x59	; 89
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	c9 81       	ldd	r28, Y+1	; 0x01
     534:	e1 81       	ldd	r30, Z+1	; 0x01
     536:	ec 17       	cp	r30, r28
     538:	e0 f4       	brcc	.+56     	; 0x572 <SortProcesses+0x8e>
     53a:	fc 01       	movw	r30, r24
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	8e 0f       	add	r24, r30
     542:	9f 1f       	adc	r25, r31
     544:	fc 01       	movw	r30, r24
     546:	e9 55       	subi	r30, 0x59	; 89
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	d0 80       	ld	r13, Z
     54c:	91 81       	ldd	r25, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	e9 01       	movw	r28, r18
     552:	cc 0f       	add	r28, r28
     554:	dd 1f       	adc	r29, r29
     556:	2c 0f       	add	r18, r28
     558:	3d 1f       	adc	r19, r29
     55a:	e9 01       	movw	r28, r18
     55c:	c9 55       	subi	r28, 0x59	; 89
     55e:	df 4f       	sbci	r29, 0xFF	; 255
     560:	68 80       	ld	r6, Y
     562:	79 80       	ldd	r7, Y+1	; 0x01
     564:	8a 80       	ldd	r8, Y+2	; 0x02
     566:	60 82       	st	Z, r6
     568:	71 82       	std	Z+1, r7	; 0x01
     56a:	82 82       	std	Z+2, r8	; 0x02
     56c:	d8 82       	st	Y, r13
     56e:	99 83       	std	Y+1, r25	; 0x01
     570:	8a 83       	std	Y+2, r24	; 0x02
     572:	1f 5f       	subi	r17, 0xFF	; 255
     574:	21 2f       	mov	r18, r17
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	24 17       	cp	r18, r20
     57a:	35 07       	cpc	r19, r21
     57c:	54 f2       	brlt	.-108    	; 0x512 <SortProcesses+0x2e>
     57e:	0f 5f       	subi	r16, 0xFF	; 255
     580:	80 2f       	mov	r24, r16
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	8a 17       	cp	r24, r26
     586:	9b 07       	cpc	r25, r27
     588:	34 f0       	brlt	.+12     	; 0x596 <SortProcesses+0xb2>
     58a:	0f c0       	rjmp	.+30     	; 0x5aa <SortProcesses+0xc6>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	00 e0       	ldi	r16, 0x00	; 0
     592:	e1 2c       	mov	r14, r1
     594:	f1 2c       	mov	r15, r1
     596:	ab 01       	movw	r20, r22
     598:	48 1b       	sub	r20, r24
     59a:	59 0b       	sbc	r21, r25
     59c:	41 50       	subi	r20, 0x01	; 1
     59e:	51 09       	sbc	r21, r1
     5a0:	14 16       	cp	r1, r20
     5a2:	15 06       	cpc	r1, r21
     5a4:	0c f4       	brge	.+2      	; 0x5a8 <SortProcesses+0xc4>
     5a6:	b2 cf       	rjmp	.-156    	; 0x50c <SortProcesses+0x28>
     5a8:	ea cf       	rjmp	.-44     	; 0x57e <SortProcesses+0x9a>
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	8f 90       	pop	r8
     5ba:	7f 90       	pop	r7
     5bc:	6f 90       	pop	r6
     5be:	08 95       	ret

000005c0 <Get_Result>:
     5c0:	2f 92       	push	r2
     5c2:	3f 92       	push	r3
     5c4:	4f 92       	push	r4
     5c6:	5f 92       	push	r5
     5c8:	6f 92       	push	r6
     5ca:	7f 92       	push	r7
     5cc:	8f 92       	push	r8
     5ce:	9f 92       	push	r9
     5d0:	af 92       	push	r10
     5d2:	bf 92       	push	r11
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Global_counter>
     5e8:	88 23       	and	r24, r24
     5ea:	09 f4       	brne	.+2      	; 0x5ee <Get_Result+0x2e>
     5ec:	8d c2       	rjmp	.+1306   	; 0xb08 <__stack+0x2a9>
     5ee:	51 2c       	mov	r5, r1
     5f0:	0f 2e       	mov	r0, r31
     5f2:	f6 e1       	ldi	r31, 0x16	; 22
     5f4:	4f 2e       	mov	r4, r31
     5f6:	f0 2d       	mov	r31, r0
     5f8:	c5 2d       	mov	r28, r5
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	fe 01       	movw	r30, r28
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e9 55       	subi	r30, 0x59	; 89
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	80 81       	ld	r24, Z
     60c:	92 81       	ldd	r25, Z+2	; 0x02
     60e:	9b 32       	cpi	r25, 0x2B	; 43
     610:	61 f0       	breq	.+24     	; 0x62a <Get_Result+0x6a>
     612:	20 f4       	brcc	.+8      	; 0x61c <Get_Result+0x5c>
     614:	9a 32       	cpi	r25, 0x2A	; 42
     616:	09 f4       	brne	.+2      	; 0x61a <Get_Result+0x5a>
     618:	3c c1       	rjmp	.+632    	; 0x892 <__stack+0x33>
     61a:	70 c2       	rjmp	.+1248   	; 0xafc <__stack+0x29d>
     61c:	9d 32       	cpi	r25, 0x2D	; 45
     61e:	09 f4       	brne	.+2      	; 0x622 <Get_Result+0x62>
     620:	9e c0       	rjmp	.+316    	; 0x75e <Get_Result+0x19e>
     622:	9f 32       	cpi	r25, 0x2F	; 47
     624:	09 f4       	brne	.+2      	; 0x628 <Get_Result+0x68>
     626:	d0 c1       	rjmp	.+928    	; 0x9c8 <__stack+0x169>
     628:	69 c2       	rjmp	.+1234   	; 0xafc <__stack+0x29d>
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	9c 01       	movw	r18, r24
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	cc 0f       	add	r28, r28
     634:	dd 1f       	adc	r29, r29
     636:	cc 0f       	add	r28, r28
     638:	dd 1f       	adc	r29, r29
     63a:	cc 0f       	add	r28, r28
     63c:	dd 1f       	adc	r29, r29
     63e:	cb 53       	subi	r28, 0x3B	; 59
     640:	df 4f       	sbci	r29, 0xFF	; 255
     642:	48 9e       	mul	r4, r24
     644:	a0 01       	movw	r20, r0
     646:	49 9e       	mul	r4, r25
     648:	50 0d       	add	r21, r0
     64a:	11 24       	eor	r1, r1
     64c:	ca 01       	movw	r24, r20
     64e:	8a 5e       	subi	r24, 0xEA	; 234
     650:	9e 4f       	sbci	r25, 0xFE	; 254
     652:	4c 01       	movw	r8, r24
     654:	fc 01       	movw	r30, r24
     656:	a3 89       	ldd	r26, Z+19	; 0x13
     658:	b4 89       	ldd	r27, Z+20	; 0x14
     65a:	42 9e       	mul	r4, r18
     65c:	c0 01       	movw	r24, r0
     65e:	43 9e       	mul	r4, r19
     660:	90 0d       	add	r25, r0
     662:	11 24       	eor	r1, r1
     664:	9c 01       	movw	r18, r24
     666:	2a 5e       	subi	r18, 0xEA	; 234
     668:	3e 4f       	sbci	r19, 0xFE	; 254
     66a:	39 01       	movw	r6, r18
     66c:	f9 01       	movw	r30, r18
     66e:	23 88       	ldd	r2, Z+19	; 0x13
     670:	34 88       	ldd	r3, Z+20	; 0x14
     672:	2c 91       	ld	r18, X
     674:	11 96       	adiw	r26, 0x01	; 1
     676:	3c 91       	ld	r19, X
     678:	11 97       	sbiw	r26, 0x01	; 1
     67a:	12 96       	adiw	r26, 0x02	; 2
     67c:	4c 91       	ld	r20, X
     67e:	12 97       	sbiw	r26, 0x02	; 2
     680:	13 96       	adiw	r26, 0x03	; 3
     682:	5c 91       	ld	r21, X
     684:	13 97       	sbiw	r26, 0x03	; 3
     686:	14 96       	adiw	r26, 0x04	; 4
     688:	6c 91       	ld	r22, X
     68a:	14 97       	sbiw	r26, 0x04	; 4
     68c:	15 96       	adiw	r26, 0x05	; 5
     68e:	7c 91       	ld	r23, X
     690:	15 97       	sbiw	r26, 0x05	; 5
     692:	16 96       	adiw	r26, 0x06	; 6
     694:	8c 91       	ld	r24, X
     696:	16 97       	sbiw	r26, 0x06	; 6
     698:	17 96       	adiw	r26, 0x07	; 7
     69a:	9c 91       	ld	r25, X
     69c:	d1 01       	movw	r26, r2
     69e:	ac 90       	ld	r10, X
     6a0:	11 96       	adiw	r26, 0x01	; 1
     6a2:	bc 90       	ld	r11, X
     6a4:	11 97       	sbiw	r26, 0x01	; 1
     6a6:	12 96       	adiw	r26, 0x02	; 2
     6a8:	cc 90       	ld	r12, X
     6aa:	12 97       	sbiw	r26, 0x02	; 2
     6ac:	13 96       	adiw	r26, 0x03	; 3
     6ae:	dc 90       	ld	r13, X
     6b0:	13 97       	sbiw	r26, 0x03	; 3
     6b2:	14 96       	adiw	r26, 0x04	; 4
     6b4:	ec 90       	ld	r14, X
     6b6:	14 97       	sbiw	r26, 0x04	; 4
     6b8:	15 96       	adiw	r26, 0x05	; 5
     6ba:	fc 90       	ld	r15, X
     6bc:	15 97       	sbiw	r26, 0x05	; 5
     6be:	16 96       	adiw	r26, 0x06	; 6
     6c0:	0c 91       	ld	r16, X
     6c2:	16 97       	sbiw	r26, 0x06	; 6
     6c4:	17 96       	adiw	r26, 0x07	; 7
     6c6:	1c 91       	ld	r17, X
     6c8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__adddi3>
     6cc:	28 83       	st	Y, r18
     6ce:	39 83       	std	Y+1, r19	; 0x01
     6d0:	4a 83       	std	Y+2, r20	; 0x02
     6d2:	5b 83       	std	Y+3, r21	; 0x03
     6d4:	6c 83       	std	Y+4, r22	; 0x04
     6d6:	7d 83       	std	Y+5, r23	; 0x05
     6d8:	8e 83       	std	Y+6, r24	; 0x06
     6da:	9f 83       	std	Y+7, r25	; 0x07
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     6e4:	d4 01       	movw	r26, r8
     6e6:	53 96       	adiw	r26, 0x13	; 19
     6e8:	ed 91       	ld	r30, X+
     6ea:	fc 91       	ld	r31, X
     6ec:	54 97       	sbiw	r26, 0x14	; 20
     6ee:	60 81       	ld	r22, Z
     6f0:	71 81       	ldd	r23, Z+1	; 0x01
     6f2:	82 81       	ldd	r24, Z+2	; 0x02
     6f4:	93 81       	ldd	r25, Z+3	; 0x03
     6f6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     6fa:	6a e0       	ldi	r22, 0x0A	; 10
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     702:	d3 01       	movw	r26, r6
     704:	53 96       	adiw	r26, 0x13	; 19
     706:	ed 91       	ld	r30, X+
     708:	fc 91       	ld	r31, X
     70a:	54 97       	sbiw	r26, 0x14	; 20
     70c:	60 81       	ld	r22, Z
     70e:	71 81       	ldd	r23, Z+1	; 0x01
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	93 81       	ldd	r25, Z+3	; 0x03
     714:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     718:	f3 01       	movw	r30, r6
     71a:	d4 8b       	std	Z+20, r29	; 0x14
     71c:	c3 8b       	std	Z+19, r28	; 0x13
     71e:	d4 01       	movw	r26, r8
     720:	54 96       	adiw	r26, 0x14	; 20
     722:	dc 93       	st	X, r29
     724:	ce 93       	st	-X, r28
     726:	53 97       	sbiw	r26, 0x13	; 19
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     730:	68 81       	ld	r22, Y
     732:	79 81       	ldd	r23, Y+1	; 0x01
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	9b 81       	ldd	r25, Y+3	; 0x03
     738:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     73c:	80 e2       	ldi	r24, 0x20	; 32
     73e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_WriteChar>
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	87 e1       	ldi	r24, 0x17	; 23
     746:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     74a:	bf e7       	ldi	r27, 0x7F	; 127
     74c:	e4 e8       	ldi	r30, 0x84	; 132
     74e:	fe e1       	ldi	r31, 0x1E	; 30
     750:	b1 50       	subi	r27, 0x01	; 1
     752:	e0 40       	sbci	r30, 0x00	; 0
     754:	f0 40       	sbci	r31, 0x00	; 0
     756:	e1 f7       	brne	.-8      	; 0x750 <Get_Result+0x190>
     758:	00 c0       	rjmp	.+0      	; 0x75a <Get_Result+0x19a>
     75a:	00 00       	nop
     75c:	cf c1       	rjmp	.+926    	; 0xafc <__stack+0x29d>
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9c 01       	movw	r18, r24
     762:	2f 5f       	subi	r18, 0xFF	; 255
     764:	3f 4f       	sbci	r19, 0xFF	; 255
     766:	cc 0f       	add	r28, r28
     768:	dd 1f       	adc	r29, r29
     76a:	cc 0f       	add	r28, r28
     76c:	dd 1f       	adc	r29, r29
     76e:	cc 0f       	add	r28, r28
     770:	dd 1f       	adc	r29, r29
     772:	cb 53       	subi	r28, 0x3B	; 59
     774:	df 4f       	sbci	r29, 0xFF	; 255
     776:	48 9e       	mul	r4, r24
     778:	a0 01       	movw	r20, r0
     77a:	49 9e       	mul	r4, r25
     77c:	50 0d       	add	r21, r0
     77e:	11 24       	eor	r1, r1
     780:	ca 01       	movw	r24, r20
     782:	8a 5e       	subi	r24, 0xEA	; 234
     784:	9e 4f       	sbci	r25, 0xFE	; 254
     786:	3c 01       	movw	r6, r24
     788:	fc 01       	movw	r30, r24
     78a:	a3 89       	ldd	r26, Z+19	; 0x13
     78c:	b4 89       	ldd	r27, Z+20	; 0x14
     78e:	42 9e       	mul	r4, r18
     790:	c0 01       	movw	r24, r0
     792:	43 9e       	mul	r4, r19
     794:	90 0d       	add	r25, r0
     796:	11 24       	eor	r1, r1
     798:	9c 01       	movw	r18, r24
     79a:	2a 5e       	subi	r18, 0xEA	; 234
     79c:	3e 4f       	sbci	r19, 0xFE	; 254
     79e:	49 01       	movw	r8, r18
     7a0:	f9 01       	movw	r30, r18
     7a2:	23 88       	ldd	r2, Z+19	; 0x13
     7a4:	34 88       	ldd	r3, Z+20	; 0x14
     7a6:	2c 91       	ld	r18, X
     7a8:	11 96       	adiw	r26, 0x01	; 1
     7aa:	3c 91       	ld	r19, X
     7ac:	11 97       	sbiw	r26, 0x01	; 1
     7ae:	12 96       	adiw	r26, 0x02	; 2
     7b0:	4c 91       	ld	r20, X
     7b2:	12 97       	sbiw	r26, 0x02	; 2
     7b4:	13 96       	adiw	r26, 0x03	; 3
     7b6:	5c 91       	ld	r21, X
     7b8:	13 97       	sbiw	r26, 0x03	; 3
     7ba:	14 96       	adiw	r26, 0x04	; 4
     7bc:	6c 91       	ld	r22, X
     7be:	14 97       	sbiw	r26, 0x04	; 4
     7c0:	15 96       	adiw	r26, 0x05	; 5
     7c2:	7c 91       	ld	r23, X
     7c4:	15 97       	sbiw	r26, 0x05	; 5
     7c6:	16 96       	adiw	r26, 0x06	; 6
     7c8:	8c 91       	ld	r24, X
     7ca:	16 97       	sbiw	r26, 0x06	; 6
     7cc:	17 96       	adiw	r26, 0x07	; 7
     7ce:	9c 91       	ld	r25, X
     7d0:	d1 01       	movw	r26, r2
     7d2:	ac 90       	ld	r10, X
     7d4:	11 96       	adiw	r26, 0x01	; 1
     7d6:	bc 90       	ld	r11, X
     7d8:	11 97       	sbiw	r26, 0x01	; 1
     7da:	12 96       	adiw	r26, 0x02	; 2
     7dc:	cc 90       	ld	r12, X
     7de:	12 97       	sbiw	r26, 0x02	; 2
     7e0:	13 96       	adiw	r26, 0x03	; 3
     7e2:	dc 90       	ld	r13, X
     7e4:	13 97       	sbiw	r26, 0x03	; 3
     7e6:	14 96       	adiw	r26, 0x04	; 4
     7e8:	ec 90       	ld	r14, X
     7ea:	14 97       	sbiw	r26, 0x04	; 4
     7ec:	15 96       	adiw	r26, 0x05	; 5
     7ee:	fc 90       	ld	r15, X
     7f0:	15 97       	sbiw	r26, 0x05	; 5
     7f2:	16 96       	adiw	r26, 0x06	; 6
     7f4:	0c 91       	ld	r16, X
     7f6:	16 97       	sbiw	r26, 0x06	; 6
     7f8:	17 96       	adiw	r26, 0x07	; 7
     7fa:	1c 91       	ld	r17, X
     7fc:	0e 94 ef 08 	call	0x11de	; 0x11de <__subdi3>
     800:	28 83       	st	Y, r18
     802:	39 83       	std	Y+1, r19	; 0x01
     804:	4a 83       	std	Y+2, r20	; 0x02
     806:	5b 83       	std	Y+3, r21	; 0x03
     808:	6c 83       	std	Y+4, r22	; 0x04
     80a:	7d 83       	std	Y+5, r23	; 0x05
     80c:	8e 83       	std	Y+6, r24	; 0x06
     80e:	9f 83       	std	Y+7, r25	; 0x07
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     818:	d3 01       	movw	r26, r6
     81a:	53 96       	adiw	r26, 0x13	; 19
     81c:	ed 91       	ld	r30, X+
     81e:	fc 91       	ld	r31, X
     820:	54 97       	sbiw	r26, 0x14	; 20
     822:	60 81       	ld	r22, Z
     824:	71 81       	ldd	r23, Z+1	; 0x01
     826:	82 81       	ldd	r24, Z+2	; 0x02
     828:	93 81       	ldd	r25, Z+3	; 0x03
     82a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     82e:	6a e0       	ldi	r22, 0x0A	; 10
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     836:	d4 01       	movw	r26, r8
     838:	53 96       	adiw	r26, 0x13	; 19
     83a:	ed 91       	ld	r30, X+
     83c:	fc 91       	ld	r31, X
     83e:	54 97       	sbiw	r26, 0x14	; 20
     840:	60 81       	ld	r22, Z
     842:	71 81       	ldd	r23, Z+1	; 0x01
     844:	82 81       	ldd	r24, Z+2	; 0x02
     846:	93 81       	ldd	r25, Z+3	; 0x03
     848:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     84c:	f4 01       	movw	r30, r8
     84e:	d4 8b       	std	Z+20, r29	; 0x14
     850:	c3 8b       	std	Z+19, r28	; 0x13
     852:	d3 01       	movw	r26, r6
     854:	54 96       	adiw	r26, 0x14	; 20
     856:	dc 93       	st	X, r29
     858:	ce 93       	st	-X, r28
     85a:	53 97       	sbiw	r26, 0x13	; 19
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     864:	68 81       	ld	r22, Y
     866:	79 81       	ldd	r23, Y+1	; 0x01
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     870:	80 e2       	ldi	r24, 0x20	; 32
     872:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_WriteChar>
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	84 2d       	mov	r24, r4
     87a:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     87e:	bf e7       	ldi	r27, 0x7F	; 127
     880:	e4 e8       	ldi	r30, 0x84	; 132
     882:	fe e1       	ldi	r31, 0x1E	; 30
     884:	b1 50       	subi	r27, 0x01	; 1
     886:	e0 40       	sbci	r30, 0x00	; 0
     888:	f0 40       	sbci	r31, 0x00	; 0
     88a:	e1 f7       	brne	.-8      	; 0x884 <__stack+0x25>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <__stack+0x2f>
     88e:	00 00       	nop
     890:	35 c1       	rjmp	.+618    	; 0xafc <__stack+0x29d>
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	9c 01       	movw	r18, r24
     896:	2f 5f       	subi	r18, 0xFF	; 255
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	cc 0f       	add	r28, r28
     89c:	dd 1f       	adc	r29, r29
     89e:	cc 0f       	add	r28, r28
     8a0:	dd 1f       	adc	r29, r29
     8a2:	cc 0f       	add	r28, r28
     8a4:	dd 1f       	adc	r29, r29
     8a6:	cb 53       	subi	r28, 0x3B	; 59
     8a8:	df 4f       	sbci	r29, 0xFF	; 255
     8aa:	48 9e       	mul	r4, r24
     8ac:	a0 01       	movw	r20, r0
     8ae:	49 9e       	mul	r4, r25
     8b0:	50 0d       	add	r21, r0
     8b2:	11 24       	eor	r1, r1
     8b4:	ca 01       	movw	r24, r20
     8b6:	8a 5e       	subi	r24, 0xEA	; 234
     8b8:	9e 4f       	sbci	r25, 0xFE	; 254
     8ba:	3c 01       	movw	r6, r24
     8bc:	dc 01       	movw	r26, r24
     8be:	53 96       	adiw	r26, 0x13	; 19
     8c0:	2d 90       	ld	r2, X+
     8c2:	3c 90       	ld	r3, X
     8c4:	54 97       	sbiw	r26, 0x14	; 20
     8c6:	42 9e       	mul	r4, r18
     8c8:	c0 01       	movw	r24, r0
     8ca:	43 9e       	mul	r4, r19
     8cc:	90 0d       	add	r25, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	fc 01       	movw	r30, r24
     8d2:	ea 5e       	subi	r30, 0xEA	; 234
     8d4:	fe 4f       	sbci	r31, 0xFE	; 254
     8d6:	4f 01       	movw	r8, r30
     8d8:	a3 89       	ldd	r26, Z+19	; 0x13
     8da:	b4 89       	ldd	r27, Z+20	; 0x14
     8dc:	ac 90       	ld	r10, X
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	bc 90       	ld	r11, X
     8e2:	11 97       	sbiw	r26, 0x01	; 1
     8e4:	12 96       	adiw	r26, 0x02	; 2
     8e6:	cc 90       	ld	r12, X
     8e8:	12 97       	sbiw	r26, 0x02	; 2
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	dc 90       	ld	r13, X
     8ee:	13 97       	sbiw	r26, 0x03	; 3
     8f0:	14 96       	adiw	r26, 0x04	; 4
     8f2:	ec 90       	ld	r14, X
     8f4:	14 97       	sbiw	r26, 0x04	; 4
     8f6:	15 96       	adiw	r26, 0x05	; 5
     8f8:	fc 90       	ld	r15, X
     8fa:	15 97       	sbiw	r26, 0x05	; 5
     8fc:	16 96       	adiw	r26, 0x06	; 6
     8fe:	0c 91       	ld	r16, X
     900:	16 97       	sbiw	r26, 0x06	; 6
     902:	17 96       	adiw	r26, 0x07	; 7
     904:	1c 91       	ld	r17, X
     906:	d1 01       	movw	r26, r2
     908:	2c 91       	ld	r18, X
     90a:	11 96       	adiw	r26, 0x01	; 1
     90c:	3c 91       	ld	r19, X
     90e:	11 97       	sbiw	r26, 0x01	; 1
     910:	12 96       	adiw	r26, 0x02	; 2
     912:	4c 91       	ld	r20, X
     914:	12 97       	sbiw	r26, 0x02	; 2
     916:	13 96       	adiw	r26, 0x03	; 3
     918:	5c 91       	ld	r21, X
     91a:	13 97       	sbiw	r26, 0x03	; 3
     91c:	14 96       	adiw	r26, 0x04	; 4
     91e:	6c 91       	ld	r22, X
     920:	14 97       	sbiw	r26, 0x04	; 4
     922:	15 96       	adiw	r26, 0x05	; 5
     924:	7c 91       	ld	r23, X
     926:	15 97       	sbiw	r26, 0x05	; 5
     928:	16 96       	adiw	r26, 0x06	; 6
     92a:	8c 91       	ld	r24, X
     92c:	16 97       	sbiw	r26, 0x06	; 6
     92e:	17 96       	adiw	r26, 0x07	; 7
     930:	9c 91       	ld	r25, X
     932:	0e 94 15 08 	call	0x102a	; 0x102a <__muldi3>
     936:	28 83       	st	Y, r18
     938:	39 83       	std	Y+1, r19	; 0x01
     93a:	4a 83       	std	Y+2, r20	; 0x02
     93c:	5b 83       	std	Y+3, r21	; 0x03
     93e:	6c 83       	std	Y+4, r22	; 0x04
     940:	7d 83       	std	Y+5, r23	; 0x05
     942:	8e 83       	std	Y+6, r24	; 0x06
     944:	9f 83       	std	Y+7, r25	; 0x07
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     94e:	d3 01       	movw	r26, r6
     950:	53 96       	adiw	r26, 0x13	; 19
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	54 97       	sbiw	r26, 0x14	; 20
     958:	60 81       	ld	r22, Z
     95a:	71 81       	ldd	r23, Z+1	; 0x01
     95c:	82 81       	ldd	r24, Z+2	; 0x02
     95e:	93 81       	ldd	r25, Z+3	; 0x03
     960:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     964:	6a e0       	ldi	r22, 0x0A	; 10
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     96c:	d4 01       	movw	r26, r8
     96e:	53 96       	adiw	r26, 0x13	; 19
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	54 97       	sbiw	r26, 0x14	; 20
     976:	60 81       	ld	r22, Z
     978:	71 81       	ldd	r23, Z+1	; 0x01
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     982:	f4 01       	movw	r30, r8
     984:	d4 8b       	std	Z+20, r29	; 0x14
     986:	c3 8b       	std	Z+19, r28	; 0x13
     988:	d3 01       	movw	r26, r6
     98a:	54 96       	adiw	r26, 0x14	; 20
     98c:	dc 93       	st	X, r29
     98e:	ce 93       	st	-X, r28
     990:	53 97       	sbiw	r26, 0x13	; 19
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     99a:	68 81       	ld	r22, Y
     99c:	79 81       	ldd	r23, Y+1	; 0x01
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
     9a2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     9a6:	80 e2       	ldi	r24, 0x20	; 32
     9a8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_WriteChar>
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	85 e1       	ldi	r24, 0x15	; 21
     9b0:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     9b4:	bf e7       	ldi	r27, 0x7F	; 127
     9b6:	e4 e8       	ldi	r30, 0x84	; 132
     9b8:	fe e1       	ldi	r31, 0x1E	; 30
     9ba:	b1 50       	subi	r27, 0x01	; 1
     9bc:	e0 40       	sbci	r30, 0x00	; 0
     9be:	f0 40       	sbci	r31, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <__stack+0x15b>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <__stack+0x165>
     9c4:	00 00       	nop
     9c6:	9a c0       	rjmp	.+308    	; 0xafc <__stack+0x29d>
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9c 01       	movw	r18, r24
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	cc 0f       	add	r28, r28
     9d2:	dd 1f       	adc	r29, r29
     9d4:	cc 0f       	add	r28, r28
     9d6:	dd 1f       	adc	r29, r29
     9d8:	cc 0f       	add	r28, r28
     9da:	dd 1f       	adc	r29, r29
     9dc:	cb 53       	subi	r28, 0x3B	; 59
     9de:	df 4f       	sbci	r29, 0xFF	; 255
     9e0:	48 9e       	mul	r4, r24
     9e2:	a0 01       	movw	r20, r0
     9e4:	49 9e       	mul	r4, r25
     9e6:	50 0d       	add	r21, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	ca 01       	movw	r24, r20
     9ec:	8a 5e       	subi	r24, 0xEA	; 234
     9ee:	9e 4f       	sbci	r25, 0xFE	; 254
     9f0:	3c 01       	movw	r6, r24
     9f2:	dc 01       	movw	r26, r24
     9f4:	53 96       	adiw	r26, 0x13	; 19
     9f6:	2d 90       	ld	r2, X+
     9f8:	3c 90       	ld	r3, X
     9fa:	54 97       	sbiw	r26, 0x14	; 20
     9fc:	42 9e       	mul	r4, r18
     9fe:	c0 01       	movw	r24, r0
     a00:	43 9e       	mul	r4, r19
     a02:	90 0d       	add	r25, r0
     a04:	11 24       	eor	r1, r1
     a06:	fc 01       	movw	r30, r24
     a08:	ea 5e       	subi	r30, 0xEA	; 234
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	4f 01       	movw	r8, r30
     a0e:	a3 89       	ldd	r26, Z+19	; 0x13
     a10:	b4 89       	ldd	r27, Z+20	; 0x14
     a12:	ac 90       	ld	r10, X
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	bc 90       	ld	r11, X
     a18:	11 97       	sbiw	r26, 0x01	; 1
     a1a:	12 96       	adiw	r26, 0x02	; 2
     a1c:	cc 90       	ld	r12, X
     a1e:	12 97       	sbiw	r26, 0x02	; 2
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	dc 90       	ld	r13, X
     a24:	13 97       	sbiw	r26, 0x03	; 3
     a26:	14 96       	adiw	r26, 0x04	; 4
     a28:	ec 90       	ld	r14, X
     a2a:	14 97       	sbiw	r26, 0x04	; 4
     a2c:	15 96       	adiw	r26, 0x05	; 5
     a2e:	fc 90       	ld	r15, X
     a30:	15 97       	sbiw	r26, 0x05	; 5
     a32:	16 96       	adiw	r26, 0x06	; 6
     a34:	0c 91       	ld	r16, X
     a36:	16 97       	sbiw	r26, 0x06	; 6
     a38:	17 96       	adiw	r26, 0x07	; 7
     a3a:	1c 91       	ld	r17, X
     a3c:	d1 01       	movw	r26, r2
     a3e:	2c 91       	ld	r18, X
     a40:	11 96       	adiw	r26, 0x01	; 1
     a42:	3c 91       	ld	r19, X
     a44:	11 97       	sbiw	r26, 0x01	; 1
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	4c 91       	ld	r20, X
     a4a:	12 97       	sbiw	r26, 0x02	; 2
     a4c:	13 96       	adiw	r26, 0x03	; 3
     a4e:	5c 91       	ld	r21, X
     a50:	13 97       	sbiw	r26, 0x03	; 3
     a52:	14 96       	adiw	r26, 0x04	; 4
     a54:	6c 91       	ld	r22, X
     a56:	14 97       	sbiw	r26, 0x04	; 4
     a58:	15 96       	adiw	r26, 0x05	; 5
     a5a:	7c 91       	ld	r23, X
     a5c:	15 97       	sbiw	r26, 0x05	; 5
     a5e:	16 96       	adiw	r26, 0x06	; 6
     a60:	8c 91       	ld	r24, X
     a62:	16 97       	sbiw	r26, 0x06	; 6
     a64:	17 96       	adiw	r26, 0x07	; 7
     a66:	9c 91       	ld	r25, X
     a68:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__udivdi3>
     a6c:	28 83       	st	Y, r18
     a6e:	39 83       	std	Y+1, r19	; 0x01
     a70:	4a 83       	std	Y+2, r20	; 0x02
     a72:	5b 83       	std	Y+3, r21	; 0x03
     a74:	6c 83       	std	Y+4, r22	; 0x04
     a76:	7d 83       	std	Y+5, r23	; 0x05
     a78:	8e 83       	std	Y+6, r24	; 0x06
     a7a:	9f 83       	std	Y+7, r25	; 0x07
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     a84:	d3 01       	movw	r26, r6
     a86:	53 96       	adiw	r26, 0x13	; 19
     a88:	ed 91       	ld	r30, X+
     a8a:	fc 91       	ld	r31, X
     a8c:	54 97       	sbiw	r26, 0x14	; 20
     a8e:	60 81       	ld	r22, Z
     a90:	71 81       	ldd	r23, Z+1	; 0x01
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     a9a:	6a e0       	ldi	r22, 0x0A	; 10
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     aa2:	d4 01       	movw	r26, r8
     aa4:	53 96       	adiw	r26, 0x13	; 19
     aa6:	ed 91       	ld	r30, X+
     aa8:	fc 91       	ld	r31, X
     aaa:	54 97       	sbiw	r26, 0x14	; 20
     aac:	60 81       	ld	r22, Z
     aae:	71 81       	ldd	r23, Z+1	; 0x01
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     ab8:	f4 01       	movw	r30, r8
     aba:	d4 8b       	std	Z+20, r29	; 0x14
     abc:	c3 8b       	std	Z+19, r28	; 0x13
     abe:	d3 01       	movw	r26, r6
     ac0:	54 96       	adiw	r26, 0x14	; 20
     ac2:	dc 93       	st	X, r29
     ac4:	ce 93       	st	-X, r28
     ac6:	53 97       	sbiw	r26, 0x13	; 19
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
     ad0:	68 81       	ld	r22, Y
     ad2:	79 81       	ldd	r23, Y+1	; 0x01
     ad4:	8a 81       	ldd	r24, Y+2	; 0x02
     ad6:	9b 81       	ldd	r25, Y+3	; 0x03
     ad8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     adc:	80 e2       	ldi	r24, 0x20	; 32
     ade:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_WriteChar>
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	84 e1       	ldi	r24, 0x14	; 20
     ae6:	0e 94 30 07 	call	0xe60	; 0xe60 <GPIO_SetValue_Pin>
     aea:	bf e7       	ldi	r27, 0x7F	; 127
     aec:	e4 e8       	ldi	r30, 0x84	; 132
     aee:	fe e1       	ldi	r31, 0x1E	; 30
     af0:	b1 50       	subi	r27, 0x01	; 1
     af2:	e0 40       	sbci	r30, 0x00	; 0
     af4:	f0 40       	sbci	r31, 0x00	; 0
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <__stack+0x291>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <__stack+0x29b>
     afa:	00 00       	nop
     afc:	53 94       	inc	r5
     afe:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Global_counter>
     b02:	58 16       	cp	r5, r24
     b04:	08 f4       	brcc	.+2      	; 0xb08 <__stack+0x2a9>
     b06:	78 cd       	rjmp	.-1296   	; 0x5f8 <Get_Result+0x38>
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	7f 90       	pop	r7
     b22:	6f 90       	pop	r6
     b24:	5f 90       	pop	r5
     b26:	4f 90       	pop	r4
     b28:	3f 90       	pop	r3
     b2a:	2f 90       	pop	r2
     b2c:	08 95       	ret

00000b2e <Load_Process>:
     b2e:	6b 32       	cpi	r22, 0x2B	; 43
     b30:	49 f0       	breq	.+18     	; 0xb44 <Load_Process+0x16>
     b32:	18 f4       	brcc	.+6      	; 0xb3a <Load_Process+0xc>
     b34:	6a 32       	cpi	r22, 0x2A	; 42
     b36:	91 f0       	breq	.+36     	; 0xb5c <Load_Process+0x2e>
     b38:	08 95       	ret
     b3a:	6d 32       	cpi	r22, 0x2D	; 45
     b3c:	49 f0       	breq	.+18     	; 0xb50 <Load_Process+0x22>
     b3e:	6f 32       	cpi	r22, 0x2F	; 47
     b40:	99 f0       	breq	.+38     	; 0xb68 <Load_Process+0x3a>
     b42:	08 95       	ret
     b44:	22 e0       	ldi	r18, 0x02	; 2
     b46:	fc 01       	movw	r30, r24
     b48:	21 83       	std	Z+1, r18	; 0x01
     b4a:	2b e2       	ldi	r18, 0x2B	; 43
     b4c:	22 83       	std	Z+2, r18	; 0x02
     b4e:	08 95       	ret
     b50:	22 e0       	ldi	r18, 0x02	; 2
     b52:	fc 01       	movw	r30, r24
     b54:	21 83       	std	Z+1, r18	; 0x01
     b56:	2d e2       	ldi	r18, 0x2D	; 45
     b58:	22 83       	std	Z+2, r18	; 0x02
     b5a:	08 95       	ret
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	fc 01       	movw	r30, r24
     b60:	21 83       	std	Z+1, r18	; 0x01
     b62:	2a e2       	ldi	r18, 0x2A	; 42
     b64:	22 83       	std	Z+2, r18	; 0x02
     b66:	08 95       	ret
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	fc 01       	movw	r30, r24
     b6c:	21 83       	std	Z+1, r18	; 0x01
     b6e:	2f e2       	ldi	r18, 0x2F	; 47
     b70:	22 83       	std	Z+2, r18	; 0x02
     b72:	08 95       	ret

00000b74 <Get_Number>:
}
/*-------------------------------------------------------------------*/
void	Get_Number(OPERAND *operand) // [work].
{
     b74:	2f 92       	push	r2
     b76:	3f 92       	push	r3
     b78:	4f 92       	push	r4
     b7a:	5f 92       	push	r5
     b7c:	6f 92       	push	r6
     b7e:	7f 92       	push	r7
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	00 d0       	rcall	.+0      	; 0xb9a <Get_Number+0x26>
     b9a:	1f 92       	push	r1
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	4c 01       	movw	r8, r24
	(operand ->Operand_num) = 0;
     ba2:	fc 01       	movw	r30, r24
     ba4:	13 86       	std	Z+11, r1	; 0x0b
     ba6:	14 86       	std	Z+12, r1	; 0x0c
     ba8:	15 86       	std	Z+13, r1	; 0x0d
     baa:	16 86       	std	Z+14, r1	; 0x0e
     bac:	17 86       	std	Z+15, r1	; 0x0f
     bae:	10 8a       	std	Z+16, r1	; 0x10
     bb0:	11 8a       	std	Z+17, r1	; 0x11
     bb2:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < (operand->Operand_counter) ; i++)
     bb4:	65 88       	ldd	r6, Z+21	; 0x15
     bb6:	66 20       	and	r6, r6
     bb8:	09 f4       	brne	.+2      	; 0xbbc <Get_Number+0x48>
     bba:	4b c0       	rjmp	.+150    	; 0xc52 <Get_Number+0xde>
     bbc:	31 96       	adiw	r30, 0x01	; 1
     bbe:	6a 94       	dec	r6
     bc0:	71 2c       	mov	r7, r1
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	68 0e       	add	r6, r24
     bc6:	71 1c       	adc	r7, r1
     bc8:	68 0c       	add	r6, r8
     bca:	79 1c       	adc	r7, r9
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
	{
		(operand ->Operand_num) *= 10;
		(operand ->Operand_num) += (operand->Operand_arr[i] - 48); 
     bdc:	a1 91       	ld	r26, Z+
     bde:	01 e0       	ldi	r16, 0x01	; 1
     be0:	0e 94 cd 08 	call	0x119a	; 0x119a <__ashldi3>
     be4:	22 2e       	mov	r2, r18
     be6:	33 2e       	mov	r3, r19
     be8:	44 2e       	mov	r4, r20
     bea:	55 2e       	mov	r5, r21
     bec:	6b 83       	std	Y+3, r22	; 0x03
     bee:	7a 83       	std	Y+2, r23	; 0x02
     bf0:	b8 2f       	mov	r27, r24
     bf2:	99 83       	std	Y+1, r25	; 0x01
     bf4:	02 e0       	ldi	r16, 0x02	; 2
     bf6:	0e 94 cd 08 	call	0x119a	; 0x119a <__ashldi3>
     bfa:	a2 2e       	mov	r10, r18
     bfc:	b3 2e       	mov	r11, r19
     bfe:	c4 2e       	mov	r12, r20
     c00:	d5 2e       	mov	r13, r21
     c02:	e6 2e       	mov	r14, r22
     c04:	f7 2e       	mov	r15, r23
     c06:	08 2f       	mov	r16, r24
     c08:	19 2f       	mov	r17, r25
     c0a:	22 2d       	mov	r18, r2
     c0c:	33 2d       	mov	r19, r3
     c0e:	44 2d       	mov	r20, r4
     c10:	55 2d       	mov	r21, r5
     c12:	6b 81       	ldd	r22, Y+3	; 0x03
     c14:	7a 81       	ldd	r23, Y+2	; 0x02
     c16:	8b 2f       	mov	r24, r27
     c18:	99 81       	ldd	r25, Y+1	; 0x01
     c1a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__adddi3>
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	d0 97       	sbiw	r26, 0x30	; 48
     c22:	1b 2f       	mov	r17, r27
     c24:	11 0f       	add	r17, r17
     c26:	11 0b       	sbc	r17, r17
     c28:	aa 2e       	mov	r10, r26
     c2a:	bb 2e       	mov	r11, r27
     c2c:	c1 2e       	mov	r12, r17
     c2e:	d1 2e       	mov	r13, r17
     c30:	e1 2e       	mov	r14, r17
     c32:	f1 2e       	mov	r15, r17
     c34:	01 2f       	mov	r16, r17
     c36:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__adddi3>
}
/*-------------------------------------------------------------------*/
void	Get_Number(OPERAND *operand) // [work].
{
	(operand ->Operand_num) = 0;
	for (u8 i = 0; i < (operand->Operand_counter) ; i++)
     c3a:	e6 15       	cp	r30, r6
     c3c:	f7 05       	cpc	r31, r7
     c3e:	71 f6       	brne	.-100    	; 0xbdc <Get_Number+0x68>
     c40:	f4 01       	movw	r30, r8
     c42:	23 87       	std	Z+11, r18	; 0x0b
     c44:	34 87       	std	Z+12, r19	; 0x0c
     c46:	45 87       	std	Z+13, r20	; 0x0d
     c48:	56 87       	std	Z+14, r21	; 0x0e
     c4a:	67 87       	std	Z+15, r22	; 0x0f
     c4c:	70 8b       	std	Z+16, r23	; 0x10
     c4e:	81 8b       	std	Z+17, r24	; 0x11
     c50:	92 8b       	std	Z+18, r25	; 0x12
	{
		(operand ->Operand_num) *= 10;
		(operand ->Operand_num) += (operand->Operand_arr[i] - 48); 
	}
	operand ->Operand_num_ptr = &operand ->Operand_num;
     c52:	c4 01       	movw	r24, r8
     c54:	0b 96       	adiw	r24, 0x0b	; 11
     c56:	f4 01       	movw	r30, r8
     c58:	94 8b       	std	Z+20, r25	; 0x14
     c5a:	83 8b       	std	Z+19, r24	; 0x13
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	9f 90       	pop	r9
     c78:	8f 90       	pop	r8
     c7a:	7f 90       	pop	r7
     c7c:	6f 90       	pop	r6
     c7e:	5f 90       	pop	r5
     c80:	4f 90       	pop	r4
     c82:	3f 90       	pop	r3
     c84:	2f 90       	pop	r2
     c86:	08 95       	ret

00000c88 <OperatorFun>:
/*  Main Function Section Ends  */


/*  Sub_program Section starts  */
void	OperatorFun(u8 element) // [2/4].
{
     c88:	cf 93       	push	r28
	if ( ((element == '*') || (element == '/') || (element == '+') || (element == '-')) && (Start_Flag == 1) )  // error
     c8a:	8a 32       	cpi	r24, 0x2A	; 42
     c8c:	09 f4       	brne	.+2      	; 0xc90 <OperatorFun+0x8>
     c8e:	bc c0       	rjmp	.+376    	; 0xe08 <OperatorFun+0x180>
     c90:	98 2f       	mov	r25, r24
     c92:	9b 7f       	andi	r25, 0xFB	; 251
     c94:	9b 32       	cpi	r25, 0x2B	; 43
     c96:	19 f0       	breq	.+6      	; 0xc9e <OperatorFun+0x16>
     c98:	8d 32       	cpi	r24, 0x2D	; 45
     c9a:	09 f0       	breq	.+2      	; 0xc9e <OperatorFun+0x16>
     c9c:	6e c0       	rjmp	.+220    	; 0xd7a <OperatorFun+0xf2>
     c9e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Start_Flag>
     ca2:	91 30       	cpi	r25, 0x01	; 1
     ca4:	09 f0       	breq	.+2      	; 0xca8 <OperatorFun+0x20>
     ca6:	69 c0       	rjmp	.+210    	; 0xd7a <OperatorFun+0xf2>
	{
		// 1- load the process.
		Load_Process(&processes[Global_counter],element);
     ca8:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <Global_counter>
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	a9 01       	movw	r20, r18
     cb0:	44 0f       	add	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	24 0f       	add	r18, r20
     cb6:	35 1f       	adc	r19, r21
     cb8:	68 2f       	mov	r22, r24
     cba:	c9 01       	movw	r24, r18
     cbc:	89 55       	subi	r24, 0x59	; 89
     cbe:	9f 4f       	sbci	r25, 0xFF	; 255
     cc0:	0e 94 97 05 	call	0xb2e	; 0xb2e <Load_Process>
		
		// 2- Load the Process ID into the Processes Array.
		processes[Global_counter].proc_ID = Global_counter;
     cc4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Global_counter>
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	f9 01       	movw	r30, r18
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	e2 0f       	add	r30, r18
     cd4:	f3 1f       	adc	r31, r19
     cd6:	e9 55       	subi	r30, 0x59	; 89
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 83       	st	Z, r24
		
		// 3- Load the Process ID into the Table.
		operation_Table[Global_counter].Operation_ID = Global_counter;
     cdc:	f9 01       	movw	r30, r18
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	ec 58       	subi	r30, 0x8C	; 140
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 83       	st	Z, r24
		
		// 4- Convert the array of characters into an integer.
		Get_Number(&Operands[Global_counter]);
     cf0:	c6 e1       	ldi	r28, 0x16	; 22
     cf2:	c2 9f       	mul	r28, r18
     cf4:	c0 01       	movw	r24, r0
     cf6:	c3 9f       	mul	r28, r19
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	8a 5e       	subi	r24, 0xEA	; 234
     cfe:	9e 4f       	sbci	r25, 0xFE	; 254
     d00:	0e 94 ba 05 	call	0xb74	; 0xb74 <Get_Number>
		
		// 5- Load the First Operand Address into the Table.
		operation_Table[Global_counter].Operand_1_ptr = Operands[Global_counter].Operand_num_ptr;
     d04:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Global_counter>
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	f9 01       	movw	r30, r18
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	e2 0f       	add	r30, r18
     d18:	f3 1f       	adc	r31, r19
     d1a:	ec 58       	subi	r30, 0x8C	; 140
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	c2 9f       	mul	r28, r18
     d20:	d0 01       	movw	r26, r0
     d22:	c3 9f       	mul	r28, r19
     d24:	b0 0d       	add	r27, r0
     d26:	11 24       	eor	r1, r1
     d28:	aa 5e       	subi	r26, 0xEA	; 234
     d2a:	be 4f       	sbci	r27, 0xFE	; 254
     d2c:	53 96       	adiw	r26, 0x13	; 19
     d2e:	2d 91       	ld	r18, X+
     d30:	3c 91       	ld	r19, X
     d32:	54 97       	sbiw	r26, 0x14	; 20
     d34:	32 83       	std	Z+2, r19	; 0x02
     d36:	21 83       	std	Z+1, r18	; 0x01
		
		// 6- increase the first counter.
		Global_counter++;
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <Global_counter>
		
		// 7- Load the Second Operand Address into the Table.
		operation_Table[Global_counter - 1].Operand_2_ptr = Operands[Global_counter].Operand_num_ptr;
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9c 01       	movw	r18, r24
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	31 09       	sbc	r19, r1
     d46:	f9 01       	movw	r30, r18
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	2e 0f       	add	r18, r30
     d52:	3f 1f       	adc	r19, r31
     d54:	f9 01       	movw	r30, r18
     d56:	ec 58       	subi	r30, 0x8C	; 140
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	c8 9f       	mul	r28, r24
     d5c:	d0 01       	movw	r26, r0
     d5e:	c9 9f       	mul	r28, r25
     d60:	b0 0d       	add	r27, r0
     d62:	11 24       	eor	r1, r1
     d64:	aa 5e       	subi	r26, 0xEA	; 234
     d66:	be 4f       	sbci	r27, 0xFE	; 254
     d68:	53 96       	adiw	r26, 0x13	; 19
     d6a:	8d 91       	ld	r24, X+
     d6c:	9c 91       	ld	r25, X
     d6e:	54 97       	sbiw	r26, 0x14	; 20
     d70:	94 83       	std	Z+4, r25	; 0x04
     d72:	83 83       	std	Z+3, r24	; 0x03
		
		// 8- Sort the Operation in the processes array
		SortProcesses();
     d74:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SortProcesses>
     d78:	4c c0       	rjmp	.+152    	; 0xe12 <OperatorFun+0x18a>
	}
	else if ((element == '=')  && (Start_Flag == 1))
     d7a:	8d 33       	cpi	r24, 0x3D	; 61
     d7c:	51 f5       	brne	.+84     	; 0xdd2 <OperatorFun+0x14a>
     d7e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Start_Flag>
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	09 f0       	breq	.+2      	; 0xd88 <OperatorFun+0x100>
     d86:	45 c0       	rjmp	.+138    	; 0xe12 <OperatorFun+0x18a>
	{
		// 1- Convert the last operand array of characters into an integer.
		Get_Number(&Operands[Global_counter]);
     d88:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Global_counter>
     d8c:	26 e1       	ldi	r18, 0x16	; 22
     d8e:	82 9f       	mul	r24, r18
     d90:	c0 01       	movw	r24, r0
     d92:	11 24       	eor	r1, r1
     d94:	8a 5e       	subi	r24, 0xEA	; 234
     d96:	9e 4f       	sbci	r25, 0xFE	; 254
     d98:	0e 94 ba 05 	call	0xb74	; 0xb74 <Get_Number>
		// 2- calculate the result.
		Get_Result();
     d9c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Get_Result>
		LCD_GoTo_xy(3,0);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_GoTo_xy>
		LCD_WriteChar('=');
     da8:	8d e3       	ldi	r24, 0x3D	; 61
     daa:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_WriteChar>
		LCD_WriteNumber(Result_buffer[Global_counter-1]);
     dae:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Global_counter>
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	e3 54       	subi	r30, 0x43	; 67
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_WriteNumber>
     dd0:	20 c0       	rjmp	.+64     	; 0xe12 <OperatorFun+0x18a>
	}
	else if ((element == 'c') && (Start_Flag == 1))
     dd2:	83 36       	cpi	r24, 0x63	; 99
     dd4:	f1 f0       	breq	.+60     	; 0xe12 <OperatorFun+0x18a>
	{

	}
	else
	{
		if ((element >= '0') && (element <='9'))
     dd6:	90 ed       	ldi	r25, 0xD0	; 208
     dd8:	98 0f       	add	r25, r24
     dda:	9a 30       	cpi	r25, 0x0A	; 10
     ddc:	d0 f4       	brcc	.+52     	; 0xe12 <OperatorFun+0x18a>
		{
			Load_Number(&Operands[Global_counter],element);
     dde:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <Global_counter>
	}
}
/*-------------------------------------------------------------------*/
void	Load_Number(OPERAND *operand ,u8 num) // [work].
{
	operand -> Operand_arr[(operand ->Operand_counter)] = num; 
     de2:	96 e1       	ldi	r25, 0x16	; 22
     de4:	29 9f       	mul	r18, r25
     de6:	f0 01       	movw	r30, r0
     de8:	11 24       	eor	r1, r1
     dea:	ea 5e       	subi	r30, 0xEA	; 234
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	95 89       	ldd	r25, Z+21	; 0x15
     df0:	df 01       	movw	r26, r30
     df2:	a9 0f       	add	r26, r25
     df4:	b1 1d       	adc	r27, r1
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	8c 93       	st	X, r24
	operand ->Operand_counter++;
     dfa:	9f 5f       	subi	r25, 0xFF	; 255
     dfc:	95 8b       	std	Z+21, r25	; 0x15
	else
	{
		if ((element >= '0') && (element <='9'))
		{
			Load_Number(&Operands[Global_counter],element);
			Operands[Global_counter].Operand_ID = Global_counter;
     dfe:	20 83       	st	Z, r18
			Start_Flag = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Start_Flag>
		}
	}
}
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <OperatorFun+0x18a>


/*  Sub_program Section starts  */
void	OperatorFun(u8 element) // [2/4].
{
	if ( ((element == '*') || (element == '/') || (element == '+') || (element == '-')) && (Start_Flag == 1) )  // error
     e08:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Start_Flag>
     e0c:	91 30       	cpi	r25, 0x01	; 1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <OperatorFun+0x18a>
     e10:	4b cf       	rjmp	.-362    	; 0xca8 <OperatorFun+0x20>
			Load_Number(&Operands[Global_counter],element);
			Operands[Global_counter].Operand_ID = Global_counter;
			Start_Flag = 1;
		}
	}
}
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <main>:

/*  Main Function Section starts  */
int main(void)
{
	// initiate the GPIO pins' Direction.
    GPIO_Init();
     e16:	0e 94 28 07 	call	0xe50	; 0xe50 <GPIO_Init>
	// initiate the LCD.
    LCD_Init();
     e1a:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_Init>
     e1e:	87 ea       	ldi	r24, 0xA7	; 167
     e20:	91 e6       	ldi	r25, 0x61	; 97
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <main+0xc>
     e26:	00 c0       	rjmp	.+0      	; 0xe28 <main+0x12>
     e28:	00 00       	nop
	_delay_ms(100);
	// Local variables.
	u8 keypad_val;
    while (1) 
    {
		keypad_val = KEYPAD_Read();
     e2a:	0e 94 61 00 	call	0xc2	; 0xc2 <KEYPAD_Read>
     e2e:	c8 2f       	mov	r28, r24
		if (keypad_val != '\0')
     e30:	88 23       	and	r24, r24
     e32:	d9 f3       	breq	.-10     	; 0xe2a <main+0x14>
		{
			if (keypad_val != '=')
     e34:	8d 33       	cpi	r24, 0x3D	; 61
     e36:	11 f0       	breq	.+4      	; 0xe3c <main+0x26>
			{
				LCD_WriteChar(keypad_val);
     e38:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_WriteChar>
			}
			OperatorFun(keypad_val);
     e3c:	8c 2f       	mov	r24, r28
     e3e:	0e 94 44 06 	call	0xc88	; 0xc88 <OperatorFun>
     e42:	83 ed       	ldi	r24, 0xD3	; 211
     e44:	90 e3       	ldi	r25, 0x30	; 48
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <main+0x30>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <main+0x36>
     e4c:	00 00       	nop
     e4e:	ed cf       	rjmp	.-38     	; 0xe2a <main+0x14>

00000e50 <GPIO_Init>:
/// @brief
/// @param
/// @return
/*______________________________________________________________________*/
GPIO_Fun_Status GPIO_Init(void) {
  DDRA->Port = (u8)PORTA_DIRECTION;
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	8a bb       	out	0x1a, r24	; 26
  DDRB->Port = (u8)PORTB_DIRECTION;
     e54:	87 bb       	out	0x17, r24	; 23
  DDRC->Port = (u8)PORTC_DIRECTION;
     e56:	8c e3       	ldi	r24, 0x3C	; 60
     e58:	84 bb       	out	0x14, r24	; 20
  DDRD->Port = (u8)PORTD_DIRECTION;
     e5a:	11 ba       	out	0x11, r1	; 17
  return GPIO_OK;
}
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	08 95       	ret

00000e60 <GPIO_SetValue_Pin>:
/// @brief
/// @param
/// @return
/*______________________________________________________________________*/
GPIO_Fun_Status GPIO_SetValue_Pin(u8 Pin, GPIO_OUTPUT_TYPE Output_Type) {
  u8 pin_num = Pin & (0b00001111);
     e60:	28 2f       	mov	r18, r24
     e62:	2f 70       	andi	r18, 0x0F	; 15
  u8 port_num = ((Pin & (0b11110000)) >> 4);
  // u8 *Location;
  switch (port_num) {
     e64:	82 95       	swap	r24
     e66:	8f 70       	andi	r24, 0x0F	; 15
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	39 f1       	breq	.+78     	; 0xeba <GPIO_SetValue_Pin+0x5a>
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <GPIO_SetValue_Pin+0x14>
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	39 f0       	breq	.+14     	; 0xe80 <GPIO_SetValue_Pin+0x20>
     e72:	79 c0       	rjmp	.+242    	; 0xf66 <GPIO_SetValue_Pin+0x106>
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	f1 f1       	breq	.+124    	; 0xef4 <GPIO_SetValue_Pin+0x94>
     e78:	84 30       	cpi	r24, 0x04	; 4
     e7a:	09 f4       	brne	.+2      	; 0xe7e <GPIO_SetValue_Pin+0x1e>
     e7c:	58 c0       	rjmp	.+176    	; 0xf2e <GPIO_SetValue_Pin+0xce>
     e7e:	73 c0       	rjmp	.+230    	; 0xf66 <GPIO_SetValue_Pin+0x106>
  case 1:
    // Location = (u8 *)(&(PORTA->BITS) + pin_num);
    CLR_BIT(PORTA->Port, pin_num);
     e80:	3b b3       	in	r19, 0x1b	; 27
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <GPIO_SetValue_Pin+0x2e>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <GPIO_SetValue_Pin+0x2a>
     e92:	48 2f       	mov	r20, r24
     e94:	40 95       	com	r20
     e96:	34 23       	and	r19, r20
     e98:	3b bb       	out	0x1b, r19	; 27
    if (Output_Type == TOGG) {
     e9a:	62 30       	cpi	r22, 0x02	; 2
     e9c:	21 f4       	brne	.+8      	; 0xea6 <GPIO_SetValue_Pin+0x46>
      //*Location = ~(*Location);
      (PORTA->Port) ^= (1 << (pin_num));
     e9e:	9b b3       	in	r25, 0x1b	; 27
     ea0:	89 27       	eor	r24, r25
     ea2:	8b bb       	out	0x1b, r24	; 27
     ea4:	60 c0       	rjmp	.+192    	; 0xf66 <GPIO_SetValue_Pin+0x106>
    } else {
      //*Location = Output_Type;
      (PORTA->Port) |= (Output_Type << (pin_num));
     ea6:	8b b3       	in	r24, 0x1b	; 27
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_SetValue_Pin+0x50>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	2a 95       	dec	r18
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_SetValue_Pin+0x4c>
     eb4:	68 2b       	or	r22, r24
     eb6:	6b bb       	out	0x1b, r22	; 27
     eb8:	56 c0       	rjmp	.+172    	; 0xf66 <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 2:
    // Location = (u8 *)(&(PORTB->BITS) + pin_num);
    CLR_BIT(PORTB->Port, pin_num);
     eba:	38 b3       	in	r19, 0x18	; 24
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_SetValue_Pin+0x68>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_SetValue_Pin+0x64>
     ecc:	48 2f       	mov	r20, r24
     ece:	40 95       	com	r20
     ed0:	34 23       	and	r19, r20
     ed2:	38 bb       	out	0x18, r19	; 24
    if (Output_Type == TOGG) {
     ed4:	62 30       	cpi	r22, 0x02	; 2
     ed6:	21 f4       	brne	.+8      	; 0xee0 <GPIO_SetValue_Pin+0x80>
      //*Location = ~(*Location);
      (PORTB->Port) ^= (1 << (pin_num));
     ed8:	98 b3       	in	r25, 0x18	; 24
     eda:	89 27       	eor	r24, r25
     edc:	88 bb       	out	0x18, r24	; 24
     ede:	43 c0       	rjmp	.+134    	; 0xf66 <GPIO_SetValue_Pin+0x106>
    } else {
      //*Location = Output_Type;
      (PORTB->Port) |= (Output_Type << (pin_num));
     ee0:	88 b3       	in	r24, 0x18	; 24
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <GPIO_SetValue_Pin+0x8a>
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	2a 95       	dec	r18
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <GPIO_SetValue_Pin+0x86>
     eee:	68 2b       	or	r22, r24
     ef0:	68 bb       	out	0x18, r22	; 24
     ef2:	39 c0       	rjmp	.+114    	; 0xf66 <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 3:
    // Location = (u8 *)(&(PORTC->BITS) + pin_num);
    CLR_BIT(PORTC->Port, pin_num);
     ef4:	35 b3       	in	r19, 0x15	; 21
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_SetValue_Pin+0xa2>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_SetValue_Pin+0x9e>
     f06:	48 2f       	mov	r20, r24
     f08:	40 95       	com	r20
     f0a:	34 23       	and	r19, r20
     f0c:	35 bb       	out	0x15, r19	; 21
    if (Output_Type == TOGG) {
     f0e:	62 30       	cpi	r22, 0x02	; 2
     f10:	21 f4       	brne	.+8      	; 0xf1a <GPIO_SetValue_Pin+0xba>
      // *Location = ~(*Location);
      (PORTC->Port) ^= (1 << (pin_num));
     f12:	95 b3       	in	r25, 0x15	; 21
     f14:	89 27       	eor	r24, r25
     f16:	85 bb       	out	0x15, r24	; 21
     f18:	26 c0       	rjmp	.+76     	; 0xf66 <GPIO_SetValue_Pin+0x106>
    } else {
      // *Location = Output_Type;
      (PORTC->Port) |= (Output_Type << (pin_num));
     f1a:	85 b3       	in	r24, 0x15	; 21
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <GPIO_SetValue_Pin+0xc4>
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	2a 95       	dec	r18
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <GPIO_SetValue_Pin+0xc0>
     f28:	68 2b       	or	r22, r24
     f2a:	65 bb       	out	0x15, r22	; 21
     f2c:	1c c0       	rjmp	.+56     	; 0xf66 <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 4:
    // Location = (u8 *)(&(PORTD->BITS) + pin_num);
    CLR_BIT(PORTD->Port, pin_num);
     f2e:	32 b3       	in	r19, 0x12	; 18
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_SetValue_Pin+0xdc>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_SetValue_Pin+0xd8>
     f40:	48 2f       	mov	r20, r24
     f42:	40 95       	com	r20
     f44:	34 23       	and	r19, r20
     f46:	32 bb       	out	0x12, r19	; 18
    if (Output_Type == TOGG) {
     f48:	62 30       	cpi	r22, 0x02	; 2
     f4a:	21 f4       	brne	.+8      	; 0xf54 <GPIO_SetValue_Pin+0xf4>
      // *Location = ~(*Location);
      (PORTD->Port) ^= (1 << (pin_num));
     f4c:	92 b3       	in	r25, 0x12	; 18
     f4e:	89 27       	eor	r24, r25
     f50:	82 bb       	out	0x12, r24	; 18
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <GPIO_SetValue_Pin+0x106>
    } else {
      // *Location = Output_Type;
      (PORTD->Port) |= (Output_Type << (pin_num));
     f54:	82 b3       	in	r24, 0x12	; 18
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_SetValue_Pin+0xfe>
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	2a 95       	dec	r18
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_SetValue_Pin+0xfa>
     f62:	68 2b       	or	r22, r24
     f64:	62 bb       	out	0x12, r22	; 18
    break;
  default:
    break;
  }
  return GPIO_OK;
}
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret

00000f6a <GPIO_ReadValue_Pin>:
/*______________________________________________________________________*/
/// @brief
/// @param
/// @return
/*______________________________________________________________________*/
u8 GPIO_ReadValue_Pin(u8 Pin) {
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	1f 92       	push	r1
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
  volatile u8 returned_Val = 0;
     f74:	19 82       	std	Y+1, r1	; 0x01
  u8 pin_num = Pin & (0b00001111);
     f76:	28 2f       	mov	r18, r24
     f78:	2f 70       	andi	r18, 0x0F	; 15
  u8 port_num = ((Pin & (0b11110000)) >> 4);
  // u8 *Location;
  switch (port_num) {
     f7a:	82 95       	swap	r24
     f7c:	8f 70       	andi	r24, 0x0F	; 15
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	99 f0       	breq	.+38     	; 0xfa8 <GPIO_ReadValue_Pin+0x3e>
     f82:	18 f4       	brcc	.+6      	; 0xf8a <GPIO_ReadValue_Pin+0x20>
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	31 f0       	breq	.+12     	; 0xf94 <GPIO_ReadValue_Pin+0x2a>
     f88:	2c c0       	rjmp	.+88     	; 0xfe2 <GPIO_ReadValue_Pin+0x78>
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	b9 f0       	breq	.+46     	; 0xfbc <GPIO_ReadValue_Pin+0x52>
     f8e:	84 30       	cpi	r24, 0x04	; 4
     f90:	f9 f0       	breq	.+62     	; 0xfd0 <GPIO_ReadValue_Pin+0x66>
     f92:	27 c0       	rjmp	.+78     	; 0xfe2 <GPIO_ReadValue_Pin+0x78>
  case 1:
    // Location = (u8 *)(&(PINA->BITS) + pin_num);
    // returned_Val = *Location;
    returned_Val = GET_BIT(PINA->Port, pin_num);
     f94:	89 b3       	in	r24, 0x19	; 25
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_ReadValue_Pin+0x36>
     f9c:	95 95       	asr	r25
     f9e:	87 95       	ror	r24
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_ReadValue_Pin+0x32>
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	89 83       	std	Y+1, r24	; 0x01
  case 2:
    // Location = (u8 *)(&(PINB->BITS) + pin_num);
    // returned_Val = *Location;
    returned_Val = GET_BIT(PINB->Port, pin_num);
     fa8:	86 b3       	in	r24, 0x16	; 22
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_ReadValue_Pin+0x48>
     fae:	95 95       	asr	r25
     fb0:	87 95       	ror	r24
     fb2:	2a 95       	dec	r18
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_ReadValue_Pin+0x44>
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
    break;
     fba:	13 c0       	rjmp	.+38     	; 0xfe2 <GPIO_ReadValue_Pin+0x78>
  case 3:
    // Location = (u8 *)(&(PINC->BITS) + pin_num);
    // returned_Val = *Location;
    returned_Val = GET_BIT(PINC->Port, pin_num);
     fbc:	82 b3       	in	r24, 0x12	; 18
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <GPIO_ReadValue_Pin+0x5c>
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	2a 95       	dec	r18
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <GPIO_ReadValue_Pin+0x58>
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
    break;
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <GPIO_ReadValue_Pin+0x78>
  case 4:
    // Location = (u8 *)(&(PIND->BITS) + pin_num);
    // returned_Val = *Location;
    returned_Val = GET_BIT(PIND->Port, pin_num);
     fd0:	80 b3       	in	r24, 0x10	; 16
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_ReadValue_Pin+0x70>
     fd6:	95 95       	asr	r25
     fd8:	87 95       	ror	r24
     fda:	2a 95       	dec	r18
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_ReadValue_Pin+0x6c>
     fde:	81 70       	andi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
    break;
  default:
    break;
  }
  return returned_Val;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <__divmodsi4>:
     fec:	05 2e       	mov	r0, r21
     fee:	97 fb       	bst	r25, 7
     ff0:	1e f4       	brtc	.+6      	; 0xff8 <__divmodsi4+0xc>
     ff2:	00 94       	com	r0
     ff4:	0e 94 0d 08 	call	0x101a	; 0x101a <__negsi2>
     ff8:	57 fd       	sbrc	r21, 7
     ffa:	07 d0       	rcall	.+14     	; 0x100a <__divmodsi4_neg2>
     ffc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__udivmodsi4>
    1000:	07 fc       	sbrc	r0, 7
    1002:	03 d0       	rcall	.+6      	; 0x100a <__divmodsi4_neg2>
    1004:	4e f4       	brtc	.+18     	; 0x1018 <__divmodsi4_exit>
    1006:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__negsi2>

0000100a <__divmodsi4_neg2>:
    100a:	50 95       	com	r21
    100c:	40 95       	com	r20
    100e:	30 95       	com	r19
    1010:	21 95       	neg	r18
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	4f 4f       	sbci	r20, 0xFF	; 255
    1016:	5f 4f       	sbci	r21, 0xFF	; 255

00001018 <__divmodsi4_exit>:
    1018:	08 95       	ret

0000101a <__negsi2>:
    101a:	90 95       	com	r25
    101c:	80 95       	com	r24
    101e:	70 95       	com	r23
    1020:	61 95       	neg	r22
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	08 95       	ret

0000102a <__muldi3>:
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	1f 93       	push	r17
    1030:	0f 93       	push	r16
    1032:	9a 9d       	mul	r25, r10
    1034:	f0 2d       	mov	r31, r0
    1036:	21 9f       	mul	r18, r17
    1038:	f0 0d       	add	r31, r0
    103a:	8b 9d       	mul	r24, r11
    103c:	f0 0d       	add	r31, r0
    103e:	8a 9d       	mul	r24, r10
    1040:	e0 2d       	mov	r30, r0
    1042:	f1 0d       	add	r31, r1
    1044:	03 9f       	mul	r16, r19
    1046:	f0 0d       	add	r31, r0
    1048:	02 9f       	mul	r16, r18
    104a:	e0 0d       	add	r30, r0
    104c:	f1 1d       	adc	r31, r1
    104e:	4e 9d       	mul	r20, r14
    1050:	e0 0d       	add	r30, r0
    1052:	f1 1d       	adc	r31, r1
    1054:	5e 9d       	mul	r21, r14
    1056:	f0 0d       	add	r31, r0
    1058:	4f 9d       	mul	r20, r15
    105a:	f0 0d       	add	r31, r0
    105c:	7f 93       	push	r23
    105e:	6f 93       	push	r22
    1060:	bf 92       	push	r11
    1062:	af 92       	push	r10
    1064:	5f 93       	push	r21
    1066:	4f 93       	push	r20
    1068:	d5 01       	movw	r26, r10
    106a:	0e 94 1a 09 	call	0x1234	; 0x1234 <__umulhisi3>
    106e:	8b 01       	movw	r16, r22
    1070:	ac 01       	movw	r20, r24
    1072:	d7 01       	movw	r26, r14
    1074:	0e 94 1a 09 	call	0x1234	; 0x1234 <__umulhisi3>
    1078:	eb 01       	movw	r28, r22
    107a:	e8 0f       	add	r30, r24
    107c:	f9 1f       	adc	r31, r25
    107e:	d6 01       	movw	r26, r12
    1080:	0e 94 65 08 	call	0x10ca	; 0x10ca <__muldi3_6>
    1084:	2f 91       	pop	r18
    1086:	3f 91       	pop	r19
    1088:	d6 01       	movw	r26, r12
    108a:	0e 94 1a 09 	call	0x1234	; 0x1234 <__umulhisi3>
    108e:	c6 0f       	add	r28, r22
    1090:	d7 1f       	adc	r29, r23
    1092:	e8 1f       	adc	r30, r24
    1094:	f9 1f       	adc	r31, r25
    1096:	af 91       	pop	r26
    1098:	bf 91       	pop	r27
    109a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__muldi3_6>
    109e:	2f 91       	pop	r18
    10a0:	3f 91       	pop	r19
    10a2:	0e 94 1a 09 	call	0x1234	; 0x1234 <__umulhisi3>
    10a6:	c6 0f       	add	r28, r22
    10a8:	d7 1f       	adc	r29, r23
    10aa:	e8 1f       	adc	r30, r24
    10ac:	f9 1f       	adc	r31, r25
    10ae:	d6 01       	movw	r26, r12
    10b0:	0e 94 1a 09 	call	0x1234	; 0x1234 <__umulhisi3>
    10b4:	e6 0f       	add	r30, r22
    10b6:	f7 1f       	adc	r31, r23
    10b8:	98 01       	movw	r18, r16
    10ba:	be 01       	movw	r22, r28
    10bc:	cf 01       	movw	r24, r30
    10be:	11 24       	eor	r1, r1
    10c0:	0f 91       	pop	r16
    10c2:	1f 91       	pop	r17
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <__muldi3_6>:
    10ca:	0e 94 1a 09 	call	0x1234	; 0x1234 <__umulhisi3>
    10ce:	46 0f       	add	r20, r22
    10d0:	57 1f       	adc	r21, r23
    10d2:	c8 1f       	adc	r28, r24
    10d4:	d9 1f       	adc	r29, r25
    10d6:	08 f4       	brcc	.+2      	; 0x10da <__muldi3_6+0x10>
    10d8:	31 96       	adiw	r30, 0x01	; 1
    10da:	08 95       	ret

000010dc <__umoddi3>:
    10dc:	68 94       	set
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <__udivdi3_umoddi3>

000010e0 <__udivdi3>:
    10e0:	e8 94       	clt

000010e2 <__udivdi3_umoddi3>:
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__udivmod64>
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	9f 90       	pop	r9
    10f4:	8f 90       	pop	r8
    10f6:	08 95       	ret

000010f8 <__udivmod64>:
    10f8:	88 24       	eor	r8, r8
    10fa:	99 24       	eor	r9, r9
    10fc:	f4 01       	movw	r30, r8
    10fe:	e4 01       	movw	r28, r8
    1100:	b0 e4       	ldi	r27, 0x40	; 64
    1102:	9f 93       	push	r25
    1104:	aa 27       	eor	r26, r26
    1106:	9a 15       	cp	r25, r10
    1108:	8b 04       	cpc	r8, r11
    110a:	9c 04       	cpc	r9, r12
    110c:	ed 05       	cpc	r30, r13
    110e:	fe 05       	cpc	r31, r14
    1110:	cf 05       	cpc	r28, r15
    1112:	d0 07       	cpc	r29, r16
    1114:	a1 07       	cpc	r26, r17
    1116:	98 f4       	brcc	.+38     	; 0x113e <__udivmod64+0x46>
    1118:	ad 2f       	mov	r26, r29
    111a:	dc 2f       	mov	r29, r28
    111c:	cf 2f       	mov	r28, r31
    111e:	fe 2f       	mov	r31, r30
    1120:	e9 2d       	mov	r30, r9
    1122:	98 2c       	mov	r9, r8
    1124:	89 2e       	mov	r8, r25
    1126:	98 2f       	mov	r25, r24
    1128:	87 2f       	mov	r24, r23
    112a:	76 2f       	mov	r23, r22
    112c:	65 2f       	mov	r22, r21
    112e:	54 2f       	mov	r21, r20
    1130:	43 2f       	mov	r20, r19
    1132:	32 2f       	mov	r19, r18
    1134:	22 27       	eor	r18, r18
    1136:	b8 50       	subi	r27, 0x08	; 8
    1138:	31 f7       	brne	.-52     	; 0x1106 <__udivmod64+0xe>
    113a:	bf 91       	pop	r27
    113c:	27 c0       	rjmp	.+78     	; 0x118c <__udivmod64+0x94>
    113e:	1b 2e       	mov	r1, r27
    1140:	bf 91       	pop	r27
    1142:	bb 27       	eor	r27, r27
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	44 1f       	adc	r20, r20
    114a:	55 1f       	adc	r21, r21
    114c:	66 1f       	adc	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	88 1c       	adc	r8, r8
    1156:	99 1c       	adc	r9, r9
    1158:	ee 1f       	adc	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	cc 1f       	adc	r28, r28
    115e:	dd 1f       	adc	r29, r29
    1160:	aa 1f       	adc	r26, r26
    1162:	bb 1f       	adc	r27, r27
    1164:	8a 14       	cp	r8, r10
    1166:	9b 04       	cpc	r9, r11
    1168:	ec 05       	cpc	r30, r12
    116a:	fd 05       	cpc	r31, r13
    116c:	ce 05       	cpc	r28, r14
    116e:	df 05       	cpc	r29, r15
    1170:	a0 07       	cpc	r26, r16
    1172:	b1 07       	cpc	r27, r17
    1174:	48 f0       	brcs	.+18     	; 0x1188 <__udivmod64+0x90>
    1176:	8a 18       	sub	r8, r10
    1178:	9b 08       	sbc	r9, r11
    117a:	ec 09       	sbc	r30, r12
    117c:	fd 09       	sbc	r31, r13
    117e:	ce 09       	sbc	r28, r14
    1180:	df 09       	sbc	r29, r15
    1182:	a0 0b       	sbc	r26, r16
    1184:	b1 0b       	sbc	r27, r17
    1186:	21 60       	ori	r18, 0x01	; 1
    1188:	1a 94       	dec	r1
    118a:	e1 f6       	brne	.-72     	; 0x1144 <__udivmod64+0x4c>
    118c:	2e f4       	brtc	.+10     	; 0x1198 <__udivmod64+0xa0>
    118e:	94 01       	movw	r18, r8
    1190:	af 01       	movw	r20, r30
    1192:	be 01       	movw	r22, r28
    1194:	cd 01       	movw	r24, r26
    1196:	00 0c       	add	r0, r0
    1198:	08 95       	ret

0000119a <__ashldi3>:
    119a:	0f 93       	push	r16
    119c:	08 30       	cpi	r16, 0x08	; 8
    119e:	90 f0       	brcs	.+36     	; 0x11c4 <__ashldi3+0x2a>
    11a0:	98 2f       	mov	r25, r24
    11a2:	87 2f       	mov	r24, r23
    11a4:	76 2f       	mov	r23, r22
    11a6:	65 2f       	mov	r22, r21
    11a8:	54 2f       	mov	r21, r20
    11aa:	43 2f       	mov	r20, r19
    11ac:	32 2f       	mov	r19, r18
    11ae:	22 27       	eor	r18, r18
    11b0:	08 50       	subi	r16, 0x08	; 8
    11b2:	f4 cf       	rjmp	.-24     	; 0x119c <__ashldi3+0x2>
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	44 1f       	adc	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	66 1f       	adc	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 95       	dec	r16
    11c6:	b2 f7       	brpl	.-20     	; 0x11b4 <__ashldi3+0x1a>
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <__adddi3>:
    11cc:	2a 0d       	add	r18, r10
    11ce:	3b 1d       	adc	r19, r11
    11d0:	4c 1d       	adc	r20, r12
    11d2:	5d 1d       	adc	r21, r13
    11d4:	6e 1d       	adc	r22, r14
    11d6:	7f 1d       	adc	r23, r15
    11d8:	80 1f       	adc	r24, r16
    11da:	91 1f       	adc	r25, r17
    11dc:	08 95       	ret

000011de <__subdi3>:
    11de:	2a 19       	sub	r18, r10
    11e0:	3b 09       	sbc	r19, r11
    11e2:	4c 09       	sbc	r20, r12
    11e4:	5d 09       	sbc	r21, r13
    11e6:	6e 09       	sbc	r22, r14
    11e8:	7f 09       	sbc	r23, r15
    11ea:	80 0b       	sbc	r24, r16
    11ec:	91 0b       	sbc	r25, r17
    11ee:	08 95       	ret

000011f0 <__udivmodsi4>:
    11f0:	a1 e2       	ldi	r26, 0x21	; 33
    11f2:	1a 2e       	mov	r1, r26
    11f4:	aa 1b       	sub	r26, r26
    11f6:	bb 1b       	sub	r27, r27
    11f8:	fd 01       	movw	r30, r26
    11fa:	0d c0       	rjmp	.+26     	; 0x1216 <__udivmodsi4_ep>

000011fc <__udivmodsi4_loop>:
    11fc:	aa 1f       	adc	r26, r26
    11fe:	bb 1f       	adc	r27, r27
    1200:	ee 1f       	adc	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	a2 17       	cp	r26, r18
    1206:	b3 07       	cpc	r27, r19
    1208:	e4 07       	cpc	r30, r20
    120a:	f5 07       	cpc	r31, r21
    120c:	20 f0       	brcs	.+8      	; 0x1216 <__udivmodsi4_ep>
    120e:	a2 1b       	sub	r26, r18
    1210:	b3 0b       	sbc	r27, r19
    1212:	e4 0b       	sbc	r30, r20
    1214:	f5 0b       	sbc	r31, r21

00001216 <__udivmodsi4_ep>:
    1216:	66 1f       	adc	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	1a 94       	dec	r1
    1220:	69 f7       	brne	.-38     	; 0x11fc <__udivmodsi4_loop>
    1222:	60 95       	com	r22
    1224:	70 95       	com	r23
    1226:	80 95       	com	r24
    1228:	90 95       	com	r25
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	bd 01       	movw	r22, r26
    1230:	cf 01       	movw	r24, r30
    1232:	08 95       	ret

00001234 <__umulhisi3>:
    1234:	a2 9f       	mul	r26, r18
    1236:	b0 01       	movw	r22, r0
    1238:	b3 9f       	mul	r27, r19
    123a:	c0 01       	movw	r24, r0
    123c:	a3 9f       	mul	r26, r19
    123e:	70 0d       	add	r23, r0
    1240:	81 1d       	adc	r24, r1
    1242:	11 24       	eor	r1, r1
    1244:	91 1d       	adc	r25, r1
    1246:	b2 9f       	mul	r27, r18
    1248:	70 0d       	add	r23, r0
    124a:	81 1d       	adc	r24, r1
    124c:	11 24       	eor	r1, r1
    124e:	91 1d       	adc	r25, r1
    1250:	08 95       	ret

00001252 <_exit>:
    1252:	f8 94       	cli

00001254 <__stop_program>:
    1254:	ff cf       	rjmp	.-2      	; 0x1254 <__stop_program>
